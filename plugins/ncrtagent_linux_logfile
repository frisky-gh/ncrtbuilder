#!/usr/bin/perl

use strict;
use JSON::PP;

if( @ARGV < 5 ){
	print "usage: % $0 CONFDIR WORKDIR MEASURE HOST\n";
	exit 1;
}

our $CONFDIR = $ARGV[0];
our $WORKDIR = $ARGV[1];
our $MEASURE = $ARGV[2];
our $HOST    = $ARGV[3];
our $SERVICE = $ARGV[4];

our $JSONCODEC = JSON::PP->new;

####
sub n ($) {
	return sprintf "%.2f", $_[0];
}
sub nP ($) {
	return sprintf "%.2f%%", $_[0];
}
sub nMB ($) {
	return sprintf "%.2fMB", $_[0];
}

sub debuglog ($) {
	open my $h, ">>", "$WORKDIR/logfile.log" or return;
	print $h $_[0], "\n";
	close $h;
}

####

sub load_conf () {
	my %entries;
	my $f = "$CONFDIR/agent/logfile.conf.$HOST.$SERVICE";
	open my $h, '<', $f or do {
		die "$f: cannot open, stopped";
	};
	while( <$h> ){
		chomp;
		next if m"^\s*(#|$)";
		if( m"^(\w+)\s+(/[-/%.\w]+)(?:\s+(\w+=\S*(?:\s+\w+=\S*)*))?\s*$" ){
			my $logname = $1;
			my $logpath = $2;
			my $options = $3;
			my %options = map { m"^(\w+)=(.*)" or die; $1 => $2 } split m"\s+", $options;

			my $has_date_placeholder;
			my $has_hour_placeholder;
			if( $logpath =~ m"%[Ymd]" ){ $has_date_placeholder = 1; }
			if( $logpath =~ m"%[H]"   ){ $has_date_placeholder = 1; $has_hour_placeholder = 1; }
			$entries{$logname} = {
				'logname' => $logname,
				'logpath' => $logpath,
				'options' => \%options,
				'has_date_placeholder' => $has_date_placeholder,
				'has_hour_placeholder' => $has_hour_placeholder,
			};
		}else{
			die "$f:$.: illegal format, stopped";
		}
	}
	close $h;
	return %entries;
}

#### Functions about Remaining Time
sub count_remainingtimes (\%$) {
	my ($curr, $now) = @_;

	my %remainingtimes;
	while( my ($k, $curr_e) = each %$curr ){
		my $options = $$curr_e{options};
		next unless $$options{EXPIRATION_TERM_H};

		my $mtime = $$curr_e{mtime};
		my $remainingtime = $$options{EXPIRATION_TERM_H} - ($now - $mtime);
		if( !defined $mtime ){
			$remainingtimes{$k} = undef;
		}elsif( $remainingtime > 0 ){
			$remainingtimes{$k} = $remainingtime;
		}else{
			$remainingtimes{$k} = 0;
		}
	}
	return %remainingtimes;
}

#### Functions about Increments
sub load_latest_entries () {
	my $f = "$WORKDIR/logfile_entries.json";
	open my $h, '<', $f or return ();
	my $json = join "", <$h>;
	close $h;
	my $obj = eval { $JSONCODEC->decode( $json ); };
	return () unless defined $obj;
	return %$obj;
}

sub store_latest_entries (%) {
	my (%entries) = @_;
	my $f = "$WORKDIR/logfile_entries.json";
	my $json = eval { $JSONCODEC->encode( \%entries ); };
	die "$f: cannot encode json, stopped" unless defined $json;
	open my $h, '>', $f or die "$f: cannot create, stopped";
	print $h "$json\n";
	close $h;
}

sub locate_logfile_having_date_placeholder ($) {
	my ($basename) = @_;

	my $now = time;
	for( my $i = 0; $i < 3; ++$i ){
		my $target_time = $now - $i * 24*60*60;
		my ($sec, $min, $hour, $day, $mon, $year) = localtime $target_time;
		my %placeholder = (
			"%" => "%",
			"Y" => sprintf("%04d", $year+1900),
			"m" => sprintf("%02d", $mon+1),
			"d" => sprintf("%02d", $day),
		);
		my $filename = $basename;
		$filename =~ s{%([%Ymd])}{$placeholder{$1}}eg;
		return $filename if -f $filename;
	}
	return undef;
}

sub locate_entries (%) {
	my (%entries) = @_;
	foreach my $entry ( values %entries ){
		my $logpath = $$entry{logpath};
		my $logfile;
		if    ( $$entry{has_hour_placeholder} ){
			die "not implemented, stopped";
		}elsif( $$entry{has_date_placeholder} ){
			$logfile = locate_logfile_having_date_placeholder $$entry{logpath};
		}else{
			$logfile = $$entry{logpath};
		}
		my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		    $atime,$mtime,$ctime,$blksize,$blocks) = stat $logfile;
		my ($logdir) = $logfile =~ m"^(.*)/[^/]+$";

		$$entry{logfile} = $logfile;
		$$entry{logdir} = $logdir;
		$$entry{inode} = $ino;
		$$entry{mtime} = $mtime;
		$$entry{size} = $size;
	}
}

sub count_increments (\%\%) {
	my ($last, $curr) = @_;

	my @add;
	my @remove;
	while( my ($k, $v) = each %$last ){
		push @remove, $k unless exists $$last{$k};
	}
	while( my ($k, $v) = each %$curr ){
		push @add, $k unless exists $$curr{$k};
	}

	my %increments;
	while( my ($k, $curr_e) = each %$curr ){
		next unless exists $$last{$k};
		my $last_e = $$last{$k};

		if( $$last_e{logfile} eq $$curr_e{logfile} ){
			if( !defined($$last_e{size}) && !defined($$curr_e{size}) ){
				$increments{$k} = undef;
			}elsif( $$last_e{size} <= $$curr_e{size} ){
				$increments{$k} = $$curr_e{size} - $$last_e{size};
			}elsif( $$last_e{inode} == $$curr_e{inode} ){
				$increments{$k} = $$curr_e{size};
			}else{
				# TODO
				$increments{$k} = $$curr_e{size};
			}
		}else{
			# TODO
			$increments{$k} = $$curr_e{size};
		}
	}
	return %increments;
}

#### Functions about History
sub load_history () {
	my $f = "$WORKDIR/logfile_history.json";
	open my $h, '<', $f or return {"timestamps"=>[], "values"=>{}};
	my $json = join "", <$h>;
	close $h;
	my $obj = eval { $JSONCODEC->decode( $json ); };
	return {"timestamps"=>[], "values"=>{}} unless defined $obj;
	return $obj;
}

sub store_history ($) {
	my ($history) = @_;
	my $f = "$WORKDIR/logfile_history.json";
	my $json = eval { $JSONCODEC->encode( $history ); };
	die "$f: cannot encode json, stopped" unless defined $json;
	open my $h, '>', $f or die "$f: cannot create, stopped";
	print $h "$json\n";
	close $h;
}

sub validate_history ($$\%) {
	my ($history, $now, $entries) = @_;
	my $timestamps = $$history{timestamps};
	my $values     = $$history{values};

	my @add;
	my @remove;
	while( my ($k, $v) = each %$values ){
		unless( exists $$entries{$k} ){
			push @remove, $k;
			next;
		}
		unless( $$entries{$k}->{options}->{MONITORING_TERM_H} > 0 ){
			push @remove, $k;
			next;
		}
	}
	while( my ($k, $v) = each %$entries ){
		unless( $$v{options}->{MONITORING_TERM_H} > 0 ){
			next;
		}
		if( exists $$values{$k} ){
			next;
		}
		push @add, $k;
	}

	foreach my $k ( @add )   { $$values{$k} = []; }
	foreach my $k ( @remove ){ delete $$values{$k}; }

	my $longest_index = 0;
	while( my ($k, $v) = each %$values ){
		my $options = $$entries{$k}->{options};
		my $monitoring_limit = $now - int($$options{MONITORING_TERM_H} // 0) * 60 * 60;

		my $index = 0;
		foreach my $t ( @$timestamps ){
			last if $t < $monitoring_limit;
			$index++;
		}
		$longest_index = $index if $longest_index < $index;
		next if @$v < $index;
		splice @$v, $index;
	}
	splice @$timestamps, $longest_index;
}

sub add_increments_to_history ($$\%) {
	my ($history, $now, $increments) = @_;
	my $timestamps = $$history{timestamps};
	my $values     = $$history{values};

	unshift @$timestamps, $now;
	while( my ($k, $v) = each %$values ){
		unshift @$v, $$increments{$k};
	}
}

sub count_longterm_increments ($) {
	my ($history) = @_;
	my $timestamps = $$history{timestamps};
	my $values     = $$history{values};

	my %longterm_increments;
	while( my ($k, $v) = each %$values ){
		next unless @$v > 1;
		my $sum;
		foreach( @$v ){ $sum += $_; }
		$longterm_increments{$k} = $sum;
	}
	return %longterm_increments;
}

####

my $now = time;

my %entries = load_conf;
locate_entries %entries;

my %remainingtimes = count_remainingtimes %entries, $now;

my %latest_entries = load_latest_entries;
my %increments = count_increments %latest_entries, %entries;

my $history = load_history;
add_increments_to_history $history, $now, %increments;
validate_history $history, $now, %entries;
my %longterm_increments = count_longterm_increments $history;

store_latest_entries %entries;
store_history $history;

foreach my $logname ( sort keys %remainingtimes ){
	my $remainingtime = $remainingtimes{$logname};
	$remainingtime = -1 unless defined $remainingtime;
	print "logfile[$logname]-has-remaining-time-of=$remainingtime\n";
}
foreach my $logname ( sort keys %increments ){
	my $size = $increments{$logname};
	$size = -1 unless defined $size;
	print "logfile[$logname]-increased-by=$size\n";
}
foreach my $logname ( sort keys %longterm_increments ){
	my $size = $longterm_increments{$logname};
	print "with-long-term-logfile[$logname]-increased-by=$size\n";
}

exit 0;


