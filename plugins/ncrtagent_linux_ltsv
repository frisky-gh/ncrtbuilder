#!/usr/bin/perl

use strict;
use Time::Piece;
use JSON::PP;

if( @ARGV < 5 ){
	print "usage: % $0 CONFDIR WORKDIR MEASURE HOST SERVICE\n";
	exit 1;
}

our $CONFDIR = $ARGV[0];
our $WORKDIR = $ARGV[1];
our $MEASURE = $ARGV[2];
our $VHOST = $ARGV[3];
our $VSERVICE = $ARGV[4];

####
sub ltsv2var ($) {
	my ($ltsv) = @_;
	my %var;
	foreach my $kv ( split m"\t", $ltsv ){
		$kv =~ m"^([^[:cntrl:]\s:;=]+)[:=](.*)$" or do {
			next;
		};
		my $k = $1;
		my $v = $2;
		$var{$k} = $v;
	}
	return %var;
}

sub n ($) {
	return sprintf "%.2f", $_[0];
}
sub nP ($) {
	return sprintf "%.2f%%", $_[0];
}
sub nMB ($) {
	return sprintf "%.2fMB", $_[0];
}

#### load service conf.
my %global_option = (
	'file_format'			=> 'ltsv',
	'timeout'			=> 9999999,
	'timestamp'			=> 'file',
	'timestamp_record_key'		=> 'timestamp',
	'timestamp_record_format'	=> '%Y-%m-%d',
);
my @rules;
my $f = "$CONFDIR/indirect/ltsv.conf.$VHOST.$VSERVICE";
open my $h, '<', $f or do {
	die "$f: cannot open, stopped";
};
while( <$h> ){
	chomp;
	next if m"^\s*(#|$)";
	if( m"^(\w+)=(\S*)$" ){
		$global_option{$1} = $2;
	}elsif( m"^(\S+)\s+(\S+)(?:\s+(\S+=\S*(\s+\S+=\S*)*))?$" ){
		my $ltsvfile = $1;
		my $key_regexp = $2;
		my $option = $3;
		my %option;
		foreach my $item ( split m"\s+", $option ){
			next unless $item =~ m"^([^\s=]+)=(.*)$";
			$option{$1} = $2;
		}
		push @rules, {
			'ltsvfile'   => $ltsvfile,
			'key_regexp' => qr"$key_regexp",
			'option'     => {%global_option, %option},
		};
	}else{
		die "$f:$.:$_: illegal format, stopped";
	}
}
close $h;

####
my $realhost = ` hostname `;
chomp $realhost;

my $rc = 0;
my @output;
foreach my $rule ( @rules ){
	my $ltsvfile   = $$rule{ltsvfile};
	my $key_regexp = $$rule{key_regexp};
	my $option     = $$rule{option};
	open my $h, '-|', "tail -1 $ltsvfile" or do {
		die "$ltsvfile: cannot open, stopped";
	};
	my $ltsv = <$h>;
	close $h;
	chomp $ltsv;
	die "$ltsvfile: cannot open, stopped" if $ltsv eq "";

	my ($filename) = $ltsvfile =~ m"(?:^|/)([^/]+)$";
	my %var;
	my $option_file_format = $$option{'file_format'};
	if    ( $option_file_format eq 'ltsv' ){
		%var = ltsv2var $ltsv;
	}elsif( $option_file_format eq 'json' ){
		%var = %{decode_json $ltsv};
	}else{
		$rc = 3;
		push @output, "option: file_format: unknown option '$option_file_format'.";
		next;
	}

	my $age;
	my $option_timestamp = $$option{'timestamp'};
	my $option_timeout   = $$option{'timeout'};
	if    ( $option_timestamp eq 'file' ){
		my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		    $atime,$mtime,$ctime,$blksize,$blocks) = stat $ltsvfile;
		$age = int( (time - $mtime) / 60 );
	}elsif( $option_timestamp eq 'record' ){
		my $key    = $$option{timestamp_record_key};
		my $format = $$option{timestamp_record_format};
		my $t = 0;
		eval {
			$t = localtime
				->strptime($var{$key}, $format)
				->strftime("%s");
		};
		if( $@ ){ push @output, "option: timestamp: parse error."; }
		$age = int( (time - $t) / 60 );
	}else{
		$rc = 2;
		push @output, "option: timestamp: unknown option '$option_timestamp'.";
		next;
	}
	printf "realhost[%s]-ltsvfile[%s]-age=%d\n", $realhost, $filename, $age;

	if( $option_timeout < $age ){
		$rc = 1;
		push @output, "$filename: expired.";
		next;
	}

	while( my ($k, $v) = each %var ){
		next unless $k =~ $key_regexp;
		print "$k=$v\n";
	}
}

if( @output ){
	my $output = join ' / ', @output;
	print "message=$output\n";
}

exit $rc;

