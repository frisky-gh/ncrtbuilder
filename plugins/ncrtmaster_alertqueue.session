#!/usr/bin/perl

use strict;

our $TOOLHOME;
BEGIN {
	$0 =~ m"^(.*)/";
	$TOOLHOME = ` cd "$1/.." && pwd || echo . `;
	chomp $TOOLHOME;
}
use lib "$TOOLHOME/plugins";
use ncrtmaster_alertqueue;

use Socket;
use Encode;
use JSON::XS;
use OSSP::uuid;

if( @ARGV < 3 ){
	print "usage: % $0 {update|cleanup} CONFDIR WORKDIR\n";
	exit 1;
}

my $subcmd = $ARGV[0];
our $CONFDIR = $ARGV[1];
our $WORKDIR = $ARGV[2];

#### Main Entry Point of Session Management

if    ( $subcmd eq "open" ){
	my $now_min = int( time / 60 );
	my @alertgroups = list_eventqueue;
	foreach my $alertgroup ( @alertgroups ){
		my @entry = list_eventbasket $alertgroup;
		next unless @entry;
		my @sorted_entry = sort { $$a{unixtime} <=> $$b{unixtime} } @entry;
		my $latest_entry = $sorted_entry[-1];
		my $latest_timestamp    = $$latest_entry{timestamp};
		my $latest_unixtime     = $$latest_entry{unixtime};
		my $latest_unixtime_min = int( $latest_unixtime / 60 );

		if( $now_min != $latest_unixtime_min ){
			# eventqueue is not updated
			next;
		}

		my $size = get_size_of_eventbasket $alertgroup, $latest_timestamp;
		if( $size < 8 ){
			# there is no event
			next;
		}

		my ($last_uuid, $creation_unixtime, $creation_timestamp) = read_alertid $alertgroup;
		if( defined $last_uuid ){
			# already alerted
			next;
		}

		my $uuid_gen = new OSSP::uuid;
		$uuid_gen->make("v4", undef, undef);
		my $uuid = $uuid_gen->export("str");
		write_alertid $alertgroup, $uuid, $latest_unixtime, $latest_timestamp;
	}

}elsif( $subcmd eq "close" ){
	my @alertgroups = list_eventqueue;
	foreach my $alertgroup ( @alertgroups ){
		my ($last_uuid, $creation_unixtime, $creation_timestamp) = read_alertid $alertgroup;
		next unless defined $last_uuid;

		my @entry = list_eventbasket $alertgroup;
		my @sorted_entry = sort { $$b{unixtime} <=> $$a{unixtime} } @entry;

		my $coolingperiod_unixtime = time - 30 * 60;
		my $alert_has_continued;
		foreach my $e ( @sorted_entry ){
			my $unixtime  = $$e{unixtime};
			my $timestamp = $$e{timestamp};
			last if $unixtime < $coolingperiod_unixtime;

			my $size = get_size_of_eventbasket $alertgroup, $timestamp;
			next if $size < 8;

			$alert_has_continued = 1;
			last;
		}
		next if $alert_has_continued;

		remove_alertid $alertgroup;
	}

}else{
	die "unknown sub command, stopped";
}

exit 0;


