#!/usr/bin/perl

our $TOOLHOME;
BEGIN {
	$0 =~ m"^(.*)/";
	$TOOLHOME = ` cd "$1/.." && pwd || echo . `;
	chomp $TOOLHOME;
}
use lib "$TOOLHOME/lib/perl5";
use NCRTAlertQueue;
use NCRTAlertQueue::Web;

use strict;

if( @ARGV < 3 ){
	print "usage: % $0 {download|refresh|cleanup} CONFDIR WORKDIR\n";
	exit 1;
}

my $subcmd = $ARGV[0];
our $CONFDIR = $ARGV[1];
our $WORKDIR = $ARGV[2];
my $conf = load_conf;

#### Main Entry Point of Image Dowload Management

if    ( $subcmd eq "download" ){
	my $l = lock_following_steps "download";
	debuglog "img: $subcmd: start.";

	my ($gdhurl, $grafanatoken) = get_gdhurl_and_grafanatoken;

	my $max = $$conf{MAX_NUM_OF_PANEL_DOWNLOADS_PER_MIN}*5;
	foreach my $i ( 1 .. $max ){
		my ($imgid, $imgreq, $unixtime) = pickup_imgreq;
		last unless defined $imgid;

		my $uuid = $$imgreq{uuid};
		unless( there_is_webpage $conf, $uuid ){
			remove_imgreq $imgid;
			next;
		}

		download_img $conf, $grafanatoken, $imgreq;
		put_imgreq_to_sleep $imgid;
	}

	debuglog "img: $subcmd: complete.";
	unlock_previous_steps $l;

}elsif( $subcmd eq "refresh" ){
	debuglog "img: $subcmd: start.";
	my $now = time;
	my @imgids = list_sleeping_imgreqs;
	foreach my $imgid ( @imgids ){
		my ($imgreq, $unixtime) = read_sleeping_imgreq $imgid;
		my $graph_timespan = $$imgreq{PANEL_RENEWAL_TIMESPAN};
		next unless $unixtime + $graph_timespan*60 < $now;
		wakeup_imgreq $imgid;
	}
	debuglog "img: $subcmd: complete.";

}elsif( $subcmd eq "cleanup" ){
	debuglog "img: $subcmd: start.";
	my $now = time;
	my @imgids = list_sleeping_imgreqs;
	foreach my $imgid ( @imgids ){
		my ($imgreq, $unixtime) = read_sleeping_imgreq $imgid;
		my $uuid = $$imgreq{uuid};
		next if reportstatus_exists "panel", $uuid;
		remove_imgreq $imgid;
	}
	debuglog "img: $subcmd: complete.";

}else{
	die "unknown sub command, stopped";
}

exit 0;


