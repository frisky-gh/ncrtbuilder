#!/usr/bin/perl

our $TOOLHOME;
BEGIN {
	$0 =~ m"^(.*)/";
	$TOOLHOME = ` cd "$1/.." && pwd || echo . `;
	chomp $TOOLHOME;
}
use lib "$TOOLHOME/lib/perl5";
use NCRTAlertQueue;
use NCRTAlertQueue::Web;

use strict;

if( @ARGV < 3 ){
	print "usage: % $0 {open|close|rename|cleanup} CONFDIR WORKDIR\n";
	exit 1;
}

my $subcmd = $ARGV[0];
our $CONFDIR = $ARGV[1];
our $WORKDIR = $ARGV[2];

#### Main Entry Point of Panel Image Management

if    ( $subcmd eq "open" ){
	my @alertgroups = list_eventqueue;
	my ($gdhurl, $grafanatoken) = get_gdhurl_and_grafanatoken;
	my $conf = load_conf;
	my $rules = load_reportrules;
	my @downloadqueue;
	my $downloadstatus = {
		"count" => 0,
		"max" => 20,
	};
	foreach my $alertgroup ( @alertgroups ){
		my ($uuid, $creation_unixtime) = read_alertid $alertgroup;
		next unless defined $uuid;
		my ($last_alertgroup, $reporting_unixtime) = read_reportstatus "graph", $uuid;
		next if $last_alertgroup eq $alertgroup;
		my ($web_alertgroup, $web_unixtime, $web_status) = read_reportstatus "web", $uuid;
		next unless $web_alertgroup eq $alertgroup;

		my $now = time;
		my $web_fired_perfs = $$web_status{fired_perfs};
		my $panelbasket = new_panelbasket;
		update_panelbasket $panelbasket, $gdhurl, $web_fired_perfs;

		my $downloadparam = get_report_param $rules, $alertgroup;
		add_to_downloadqueue @downloadqueue, $conf,
	       		$alertgroup, $uuid, $panelbasket, $downloadparam;

		write_reportstatus "graph", $uuid, $alertgroup, $now, {
			"panelbasket" => $panelbasket,
		};
	}
	execute_downloadqueue @downloadqueue, $conf,
       		$downloadstatus, $grafanatoken;


}elsif( $subcmd eq "close" ){
	my @uuids = list_reportstatus "graph";
	foreach my $uuid ( @uuids ){
		my ($last_alertgroup, $reporting_unixtime) = read_reportstatus "web", $uuid;
		next unless defined $last_alertgroup;
		my ($last_uuid, $creation_unixtime) = read_alertid $last_alertgroup;
		next if $last_uuid eq $uuid;

		# TODO

	}

}elsif( $subcmd eq "update" ){
	my ($gdhurl, $grafanatoken) = get_gdhurl_and_grafanatoken;
	my $conf = load_conf;
	my $rules = load_reportrules;
	my @downloadqueue;
	my $downloadstatus = {
		"count" => 0,
		"max" => 20,
	};

	my @uuids = list_reportstatus "graph";
	foreach my $uuid ( @uuids ){
		my ($alertgroup, $reporting_unixtime, $status) = read_reportstatus "graph", $uuid;
		next unless defined $alertgroup;
		my ($web_alertgroup, $reporting_unixtime, $web_status) = read_reportstatus "web", $uuid;
		next unless $alertgroup eq $web_alertgroup;

		my $now = time;
		my $web_fired_perfs = $$web_status{fired_perfs};
		my $panelbasket     = $$status{panelbasket};
		update_panelbasket $panelbasket, $gdhurl, $web_fired_perfs;

		my $downloadparam = get_report_param $rules, $alertgroup;
		add_to_downloadqueue @downloadqueue, $conf,
	       		$alertgroup, $uuid, $panelbasket, $downloadparam;

		write_reportstatus "graph", $uuid, $alertgroup, $now, {
			"panelbasket" => $panelbasket,
		};
	}
	execute_downloadqueue @downloadqueue, $conf,
       		$downloadstatus, $grafanatoken;

}elsif( $subcmd eq "rename" ){
}elsif( $subcmd eq "cleanup" ){
}else{
	die "unknown sub command, stopped";
}

exit 0;


