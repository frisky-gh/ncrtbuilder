#!/usr/bin/perl

our $TOOLHOME;
BEGIN {
	$0 =~ m"^(.*)/";
	$TOOLHOME = ` cd "$1/.." && pwd || echo . `;
	chomp $TOOLHOME;
}
use lib "$TOOLHOME/lib/perl5";
use NCRTAlertQueue;
use NCRTAlertQueue::Stats;
use NCRTAlertQueue::Web;

use strict;

if( @ARGV < 3 ){
	print "usage: % $0 {open|close|update|rename|cleanup} CONFDIR WORKDIR\n";
	exit 1;
}

my $subcmd = $ARGV[0];
our $CONFDIR = $ARGV[1];
our $WORKDIR = $ARGV[2];
my $conf = load_conf;

#### Functions

sub write_webpage_and_reportstatus ($$$$$$$$) {
	my ($alertgroup, $uuid, $creation_unixtime,
	    $action, $webpage_status,
	    $last_reportstatus, $curr_eventbasket, $panels) = @_;

	my $now = time;
	my $stats = create_new_stats $alertgroup;
	compute_stats_in_range $stats, $creation_unixtime, $now;
	my %stats_summary = output_stats_summary $stats;

	write_webpage $conf, $alertgroup, $uuid, $now, $action, %stats_summary, $panels;

	write_reportstatus "web", $uuid, $alertgroup, $now, {
		"session_status" => $webpage_status,
		"creation_unixtime" => $creation_unixtime,
		"current_unixtime"  => $now,
		"stats" => $stats,
		"moid_list_of_fired_perfs" => [list_perf_moids_of_stats $stats],
	};
}

#### Main Entry Point of Wwb Page Management

if    ( $subcmd eq "open" ){
	debuglog "web: $subcmd: start.";
	my @alertgroups = list_eventqueue;
	foreach my $alertgroup ( @alertgroups ){
		my ($uuid, $creation_unixtime, $prev_uuid) = read_alertid $alertgroup;
		next unless defined $uuid;
		next if defined $prev_uuid;
		my ($last_alertgroup, $reporting_unixtime) = read_reportstatus "web", $uuid;
		next if defined $last_alertgroup;

		debuglog "web: $subcmd: opening a new session $uuid.";

		my ($curr_eventbasket) = read_latest_eventbasket $alertgroup;
		my $new_reportstatus = get_new_reportstatus;

		my ($panel_alertgroup, $panel_unixtime, $panel_status) = read_reportstatus "panel", $uuid;
		my $panels = $$panel_status{panelbasket}->{panels};

		write_webpage_and_reportstatus $alertgroup, $uuid, $creation_unixtime,
			"open", "opened",
			$new_reportstatus, $curr_eventbasket, $panels;
	}
	debuglog "web: $subcmd: complete.";

}elsif( $subcmd eq "close" ){
	debuglog "web: $subcmd: start.";
	my @uuids = list_reportstatus "web";
	foreach my $uuid ( @uuids ){
		my ($alertgroup, $reporting_unixtime, $reportstatus) = read_reportstatus "web", $uuid;
		next unless defined $alertgroup;
		my $session_status = $$reportstatus{session_status};
		next unless $session_status eq "opened";
		my ($last_uuid, $creation_unixtime) = read_alertid $alertgroup;
		next if $uuid eq $last_uuid;

		debuglog "web: $subcmd: closing a session $uuid.";

		my ($latest_eventbasket) = read_latest_eventbasket $alertgroup;

		my ($panel_alertgroup, $panel_unixtime, $panel_reportstatus) = read_reportstatus "panel", $uuid;
		my $panels = $$panel_reportstatus{panelbasket}->{panels};

		write_webpage_and_reportstatus $alertgroup, $uuid, $creation_unixtime,
			"close", "closed",
			$reportstatus, $latest_eventbasket, $panels;
	}
	debuglog "web: $subcmd: complete.";

}elsif( $subcmd eq "rename" ){
	debuglog "web: $subcmd: start.";
	my @alertgroups = list_eventqueue;
	foreach my $alertgroup ( @alertgroups ){
		my ($next_uuid, $creation_unixtime, $prev_uuid) = read_alertid $alertgroup;
		next unless defined $prev_uuid;
		my ($prev_alertgroup, $reporting_unixtime, $reportstatus) = read_reportstatus "web", $prev_uuid;
		my $session_status = $$reportstatus{session_status};
		next unless $session_status eq "opened";

		debuglog "web: $subcmd: renaming a session $prev_uuid to $next_uuid.";

		my ($latest_eventbasket) = read_latest_eventbasket $alertgroup;

		my ($panel_alertgroup, $panel_unixtime, $panel_reportstatus) = read_reportstatus "panel", $prev_uuid;
		my $panels = $$panel_reportstatus{panelbasket}->{panels};

		rename_webpage $conf, $prev_uuid, $next_uuid;
		write_webpage_and_reportstatus $alertgroup, $next_uuid, $creation_unixtime,
			"rename", "opened",
			$reportstatus, $latest_eventbasket, $panels;
	}
	debuglog "web: $subcmd: complete.";

}elsif( $subcmd eq "update" ){
	debuglog "web: $subcmd: start.";
	my @uuids = list_reportstatus "web";
	foreach my $uuid ( @uuids ){
		my ($alertgroup, $reporting_unixtime, $reportstatus) = read_reportstatus "web", $uuid;
		next unless defined $alertgroup;
		my $session_status = $$reportstatus{session_status};
		next unless $session_status eq "opened";
		my $creation_unixtime = $$reportstatus{creation_unixtime};

		my ($latest_eventbasket) = read_latest_eventbasket $alertgroup;

		my ($panel_alertgroup, $panel_unixtime, $panel_reportstatus) = read_reportstatus "panel", $uuid;
		my $panels = $$panel_reportstatus{panelbasket}->{panels};

		write_webpage_and_reportstatus $alertgroup, $uuid, $creation_unixtime,
			"update", "opened",
			$reportstatus, $latest_eventbasket, $panels;
	}
	debuglog "web: $subcmd: complete.";

}elsif( $subcmd eq "cleanup" ){
	debuglog "web: $subcmd: start.";
	my $rules = load_reportrules;
	my @uuids = list_reportstatus "web";
	foreach my $uuid ( @uuids ){
		my ($alertgroup, $reporting_unixtime, $reportstatus) = read_reportstatus "web", $uuid;
		next unless defined $alertgroup;
		my ($last_uuid, $creation_unixtime, $prev_uuid) = read_alertid $alertgroup;
		next if $uuid eq $last_uuid;
		next if $uuid eq $prev_uuid;

		debuglog "web: $subcmd: expiring a session $uuid.";

		my $session_status = $$reportstatus{session_status};
		if    ( $session_status eq "opened" ){
			remove_webpage $conf, $uuid;
			remove_reportstatus "web", $uuid;
		}elsif( $session_status eq "renamed" ){
			remove_webpage $conf, $uuid;
			remove_reportstatus "web", $uuid;
		}elsif( $session_status eq "closed" ){
			my $now = time;
			my $webparam = get_report_param $rules, $alertgroup;
			my $expire_timespan = $$webparam{WEB_EXPIRATION_TIMESPAN};
			next unless $reporting_unixtime + $expire_timespan*60 < $now;
			remove_webpage $conf, $uuid;
			remove_reportstatus "web", $uuid;
		}else{
			debuglog "web: $subcmd: a session $uuid has unknown status $session_status.";
			remove_webpage $conf, $uuid;
			remove_reportstatus "web", $uuid;
		}
	}
	debuglog "web: $subcmd: complete.";

}else{
	die "unknown sub command, stopped";
}

exit 0;


