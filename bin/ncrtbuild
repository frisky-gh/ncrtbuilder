#!/usr/bin/perl

use strict;
use Cwd 'abs_path';
use URI::Escape;

$0 =~ m"^(.*)/";
our $TOOLHOME = abs_path("$1/..");
our $PLUGINSDIR = "$TOOLHOME/plugins";
our $PLAYBOOKSDIR = "$TOOLHOME/playbooks";
our $CONFDIR = "$TOOLHOME/conf";
our $SRCDIR = "$TOOLHOME/src";
our $TMPDIR = "/tmp";
our $WORKDIR = "$TMPDIR/ncrt_work";

our $AGENTCONFDIR = "$TOOLHOME/ncrtagent/conf";
our $MASTERCONFDIR = "$TOOLHOME/ncrtmaster/conf";

#if( @ARGV < 1 ){
#	print "usage: % $0 CHECK_PLUGIN_NAME\n";
#	exit 3;
#}

####
sub rm_r ($) {
	my ($r) = @_;
	if( opendir my $d, $r ){
		my @e = readdir $d;
		foreach my $e ( @e ){
			next if $e eq '..' || $e eq '.';
			if( -d "$r/$e" ){
				rm_r( "$r/$e" );
			}else{
				unlink "$r/$e" or die "$r/$e, stopped";
			}
		}
		closedir $d;
	}
	rmdir $r or die "$r, stopped";
}

sub parse_itementry ($) {
	( $_ ) = @_;
	chomp;
	return undef, undef if m"^\s*(#|$)";
	return undef, "illegal format" unless m"^(\w+)"g;
	my $item = $1;
	my %opt;
	my %templateopt;
	while( m{\G
		($|\s+
			(\@)?(\w+)=
			(?:
				"([^\\"]*(?:(?:\\\\|\\")+[^\\"]*)*)"|
				([\w\!\#-\&\(-\/\:-\@\[-\_\{-\~]+)
			)
		)
	}gx ){
		return $item, \%opt, \%templateopt if $1 eq '';

		my $template = $2;
		my $key = $3;
		my $value = $4 ne '' ? $4 : $5;

		if( $template ){ $templateopt{$key} = $value; }
		else{ $opt{$key} = $value; }
	}
	return undef;
}

sub parse_addressentry ($) {
	( $_ ) = @_;
	chomp;
	return undef, undef if m"^\s*(#|$)";
	return undef, "illegal format" unless m"^(\S+\@[-.a-zA-Z0-9]+)"g;
	my $item = $1;
	my %opt;
	my %templateopt;
	while( m{\G
		($|\s+
			(\@)?(\w+)=
			(?:
				"([^\\"]*(?:(?:\\\\|\\")+[^\\"]*)*)"|
				([\w\!\#-\&\(-\/\:-\@\[-\_\{-\~]+)
			)
		)
	}gx ){
		return $item, \%opt, \%templateopt if $1 eq '';

		my $template = $2;
		my $key = $3;
		my $value = $4 ne '' ? $4 : $5;

		if( $template ){ $templateopt{$key} = $value; }
		else{ $opt{$key} = $value; }
	}
	return undef;
}

sub parse_mapping ($) {
	( $_ ) = @_;
	chomp;
	return undef, undef, undef if m"^\s*(#|$)";
	return undef, undef, "illegal format" unless m"^(\S+)\s+(\w+(\.\d+)?)"g;
	my $from = $1;
	my $to = $2;
	my %opt;
	while( m{\G
		($|\s+
			(\w+)=
			(?:
				"([^\\"]*(?:(?:\\\\|\\")+[^\\"]*)*)"|
				([\w\!\#-\&\(-\/\:-\@\[-\_\{-\~]+)
			)
		)
	}gx ){
		return $from, $to, \%opt if $1 eq '';

		my $key = $2;
		my $value = $3 ne '' ? $3 : $4;
		$opt{$key} = $value;
	}
	return undef, undef, undef;
}

sub parse_host2item_mapping ($) {
	( $_ ) = @_;
	chomp;
	return undef, undef, undef if m"^\s*(#|$)";
	return undef, undef, "illegal format" unless m"^(\S+)\s+(\S+)$";
	return $1, $2, undef;
}

sub parse_hostservice2item_mapping ($) {
	( $_ ) = @_;
	chomp;
	return undef, undef, undef, undef if m"^\s*(#|$)";
	return undef, undef, undef, "illegal format" unless m"^(\S+)\s+(\w+(?:\.\d+)?)\s+(\S+)$";
	return $1, $2, $3, undef;
}

sub expand_params ($\%) {
	my ($text, $params) = @_;
	$text =~ s{ \%(\w+)\% }{ $params->{$1}; }egx;
	return $text;
}

#END { rm_r $WORKDIR if -d $WORKDIR; }

#### load template conf.
my %ncrtconf;
if( open my $f, '<', "$CONFDIR/ncrtbuild.conf" ){
	while( <$f> ){
		chomp;
		next if m"^\s*(#|$)";
		die unless m"^(\w+)=(.*)$";
		$ncrtconf{$1} = $2;
	}
	close $f;
}
our $ANSIBLEOPTIONS = $ncrtconf{'ANSIBLEOPTIONS'};
our $NCRTAGENTHOME  = $ncrtconf{'NCRTAGENTHOME'};
our $NCRTMASTERHOME = $ncrtconf{'NCRTMASTERHOME'};
our $HELPERURL      = $ncrtconf{'HELPERURL'};
our $GRAFANADB      = $ncrtconf{'GRAFANADB'};
our $GRAFANAUSER    = $ncrtconf{'GRAFANAUSER'};
our $GRAFANAPASSWD  = $ncrtconf{'GRAFANAPASSWD'};
our $GRAFANAORGID   = $ncrtconf{'GRAFANAORGID'};
our $INFLUXDBHOST	= $ncrtconf{'INFLUXDBHOST'} || 'localhost';
our $INFLUXDBPORT	= $ncrtconf{'INFLUXDBPORT'} || '8086';
our $INFLUXDBADMINUSER   = $ncrtconf{'INFLUXDBADMINUSER'} || 'admin';
our $INFLUXDBADMINPASSWD = $ncrtconf{'INFLUXDBADMINPASSWD'} || 'admin';
our $INFLUXDBUSER	= $ncrtconf{'INFLUXDBUSER'} || 'naemon';
our $INFLUXDBPASSWD      = $ncrtconf{'INFLUXDBPASSWD'} || 'naemon';
our $INFLUXDBDATABASE    = $ncrtconf{'INFLUXDBDATABASE'} || 'naemon';
our $AGENTPACKAGE	= $ncrtconf{'AGENTPACKAGE'} || 'nrpe';
our $NRPEPORT	    = $ncrtconf{'NRPEPORT'} || '5666';
our $NRPETLS	     = $ncrtconf{'NRPETLS'} || 'yes';


#### setup naemon2influx
our $NAEMON2INFLUX_DEB;
if( opendir my $d, $CONFDIR ){
	while( my $e = readdir $d ){
		next unless $e =~ m"^naemon2influx-\d.*\.deb$";
		$NAEMON2INFLUX_DEB = $e;
		last;
	}
	closedir $d;
}
if( not defined $NAEMON2INFLUX_DEB ){
	unless( -d "$SRCDIR/naemon2influx" ){
		my $r = system "git clone --depth=1 https://github.com/hakong/naemon2influx.git $SRCDIR/naemon2influx";
		die unless $r == 0;
	}
	my $r = system "make deb -C $SRCDIR/naemon2influx";
	die unless $r == 0;
	if( opendir my $d, "$SRCDIR/naemon2influx" ){
		while( my $e = readdir $d ){
			next unless $e =~ m"^naemon2influx-\d.*\.deb$";
			$NAEMON2INFLUX_DEB = $e;
			last;
		}
		closedir $d;
	}
	die unless defined $NAEMON2INFLUX_DEB;
	my $r = system "cp $SRCDIR/naemon2influx/$NAEMON2INFLUX_DEB $CONFDIR/$NAEMON2INFLUX_DEB";
	die unless $r == 0;
}

#### setup naemon2influx-grafana-helper
our $NAEMON2INFLUX_GRAFANA_HELPER_DEB;
if( opendir my $d, $CONFDIR ){
	while( my $e = readdir $d ){
		next unless $e =~ m"^naemon2influx-grafana-helper_.*\.deb$";
		$NAEMON2INFLUX_GRAFANA_HELPER_DEB = $e;
		last;
	}
	closedir $d;
}
if( not defined $NAEMON2INFLUX_GRAFANA_HELPER_DEB ){
	unless( -d "$SRCDIR/naemon2influx-grafana-helper" ){
		my $r = system "git clone --depth=1 https://github.com/frisky-gh/naemon2influx-grafana-helper.git $SRCDIR/naemon2influx-grafana-helper";
		die unless $r == 0;
	}
	my $r = system "cd $SRCDIR/naemon2influx-grafana-helper && dpkg-buildpackage --no-sign";
	die unless $r == 0;
	if( opendir my $d, "$SRCDIR" ){
		while( my $e = readdir $d ){
			next unless $e =~ m"^naemon2influx-grafana-helper_.*\.deb$";
			$NAEMON2INFLUX_GRAFANA_HELPER_DEB = $e;
			last;
		}
		closedir $d;
	}
	die unless defined $NAEMON2INFLUX_GRAFANA_HELPER_DEB;
	my $r = system "cp $SRCDIR/$NAEMON2INFLUX_GRAFANA_HELPER_DEB $CONFDIR/$NAEMON2INFLUX_GRAFANA_HELPER_DEB";
	die unless $r == 0;
}

#### create server cert. if not exists
if( ! -f "$CONFDIR/ncrt_key.pem" ){
	my $r = system "openssl req -verbose -subj '/C=JP/ST=Kanagawa-ken/O=Watao Family/CN=*' -x509 -newkey rsa:2048 -nodes -keyout $CONFDIR/ncrt_key.pem -out $CONFDIR/ncrt_cert.pem -days 36525";
	die unless $r == 0;
}

#### initialize fixed work dirs and files
rm_r $WORKDIR if -d $WORKDIR;
mkdir $WORKDIR or die;
mkdir "$WORKDIR/ncrtmaster" or die;
mkdir "$WORKDIR/ncrtagent" or die;

# hostname -> hosttype mappings
open my $f, '>', "$WORKDIR/hosts" or die; close $f;

# hosttype list
open my $f, '>', "$WORKDIR/hosttypes" or die; close $f;

# service list
open my $f, '>', "$WORKDIR/services" or die; close $f;

# service -> configuration file multi-mappings
open my $f, '>', "$WORKDIR/service2conf" or die; close $f;

# hostname -> service multi-mapping
open my $f, '>', "$WORKDIR/host2service" or die; close $f;

# hostname -> contact multi-mapping
open my $f, '>', "$WORKDIR/host2contact" or die; close $f;

# (hostname, service) -> contact multi-mapping
open my $f, '>', "$WORKDIR/hostservice2contact" or die; close $f;

# hostname -> groupname multi-mapping
open my $f, '>', "$WORKDIR/host2group" or die; close $f;

# (hostname, service) -> groupname multi-mapping
open my $f, '>', "$WORKDIR/hostservice2group" or die; close $f;

# username list
open my $f, '>', "$WORKDIR/users" or die; close $f;

# email address list
open my $f, '>', "$WORKDIR/addresses" or die; close $f;

####
my $action_url = "${HELPERURL}/redirect.html?hostname=\$_HOSTURLENCODED\$&servicedesc=\$_SERVICEURLENCODED\$";
open my $f, '>', "$WORKDIR/ncrt_hosttemplates.cfg" or die;
print $f <<"EOF";
# host settings for Nagios / Naemon

define host {
	name				ncrt-generic-host

	display_name			\$HOSTNAME\$

	check_command			ncrt-check-host
	check_interval			5
	retry_interval			1
	max_check_attempts		3
	check_period			24x7

	notifications_enabled		1
	notification_interval		60
	notification_options		d,u,r
	notification_period		24x7
	contact_groups			

	process_perf_data		1
	event_handler_enabled		1	; Host event handler is enabled
	flap_detection_enabled		1	; Flap detection is enabled
	retain_nonstatus_information	1       ; Retain non-status information across program restarts
	retain_status_information	1       ; Retain status information across program restarts

	register			0	; DONT REGISTER THIS DEFINITION - ITS NOT A REAL HOST, JUST A TEMPLATE!

}

EOF
open my $f, '>', "$WORKDIR/ncrt_servicetemplates.cfg" or die;
print $f <<"EOF";
# service settings for Nagios / Naemon

define service {
	name				ncrt-generic-service

	display_name			Service:\$SERVICEDESC\$

	active_checks_enabled		1
	passive_checks_enabled		1
	check_freshness			0       ; Default is to NOT check service 'freshness'
	check_interval			5
	retry_interval			1
	max_check_attempts		3
	check_period			24x7

	notifications_enabled		1
	notification_interval		60
	notification_options		w,u,c,r
	notification_period		24x7
	contact_groups			

	is_volatile			0       ; The service is not volatile
	obsess_over_service		1       ; We should obsess over this service (if necessary)
	process_perf_data		1
	event_handler_enabled		1       ; Service event handler is enabled
	flap_detection_enabled		1       ; Flap detection is enabled
	retain_nonstatus_information	1       ; Retain non-status information across program restarts
	retain_status_information	1       ; Retain status information across program restarts

	action_url			$action_url

	register			0	; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!
}

EOF
close $f;
open my $f, '>', "$WORKDIR/vars.yml" or die;
print $f <<"EOF";
---

 HELPERURL:	   "$HELPERURL"
 GRAFANADB:	   "$GRAFANADB"
 GRAFANAUSER:	 "$GRAFANAUSER"
 GRAFANAPASSWD:       "$GRAFANAPASSWD"
 GRAFANAORGID:	"$GRAFANAORGID"
 NCRTAGENTHOME:       "$NCRTAGENTHOME"
 NCRTMASTERHOME:      "$NCRTMASTERHOME"
 NAEMON2INFLUX_DEB:   "$NAEMON2INFLUX_DEB"
 INFLUXDBHOST:	"$INFLUXDBHOST"
 INFLUXDBPORT:	"$INFLUXDBPORT"
 INFLUXDBADMINUSER:   "$INFLUXDBADMINUSER"
 INFLUXDBADMINPASSWD: "$INFLUXDBADMINPASSWD"
 INFLUXDBUSER:	"$INFLUXDBUSER"
 INFLUXDBPASSWD:      "$INFLUXDBPASSWD"
 INFLUXDBDATABASE:    "$INFLUXDBDATABASE"
 AGENTPACKAGE:	"$AGENTPACKAGE"
 NRPEPORT:	    "$NRPEPORT"
 NRPETLS:	     "$NRPETLS"
EOF
close $f;

#### run all plugins
my @service_plugins;
my @contact_plugins;
opendir my $d, $PLUGINSDIR or die;
while( my $e = readdir $d ){
	next unless $e =~ m"^ncrtbuild(?:(service|hosttype)|(contact))_";
	push @service_plugins, $e if $1;
	push @contact_plugins, $e if $2;
}
closedir $d;
foreach my $e ( sort @service_plugins ){
	print "$PLUGINSDIR/$e $CONFDIR $WORKDIR\n";
	my $r = system "$PLUGINSDIR/$e $CONFDIR $WORKDIR";
	print "r=", $r, "\n";
	die unless $r == 0;
}
foreach my $e ( sort @contact_plugins ){
	print "$PLUGINSDIR/$e $CONFDIR $WORKDIR\n";
	my $r = system "$PLUGINSDIR/$e $CONFDIR $WORKDIR";
	print "r=", $r, "\n";
	die unless $r == 0;
}

#### initialize variable work dirs.
my @ncrtmasters;
if( open my $f, '<', "$CONFDIR/ncrtmasters.conf" ){
	while( <$f> ){
		chomp;
		next if m"^\s*(#|$)";
		push @ncrtmasters, $_;
	}
	close $f;
}
my %host2hosttype;
my $hosttype_has_collision;
if( open my $f, '<', "$WORKDIR/hosts" ){
	while( <$f> ){
		chomp;
		my ($host, $hosttype) = split m"\s+";
		if( not defined $host2hosttype{$host} ){
			$host2hosttype{$host} = $hosttype;
		}elsif( $host2hosttype{$host} ne $hosttype ){
			print "ERROR: host $host has multiple hosttypes.\n";
			$hosttype_has_collision = 1;
		}
	}
	close $f;
}
die if $hosttype_has_collision;
my @ncrtagents;
while( my ($h, $t) = each %host2hosttype ){
	push @ncrtagents, $h unless $t eq "virtual";
}

foreach my $h ( @ncrtmasters ){
	mkdir "$WORKDIR/ncrtmaster/$h" or die;
	mkdir "$WORKDIR/ncrtmaster/$h/service" or die;
	my $r = system "rsync -aSvx $MASTERCONFDIR/ $WORKDIR/ncrtmaster/$h/";
	die unless $r == 0;
}
foreach my $h ( @ncrtagents ){
	mkdir "$WORKDIR/ncrtagent/$h" or die;
	mkdir "$WORKDIR/ncrtagent/$h/service" or die;
	my $r = system "rsync -aSvx $AGENTCONFDIR/ $WORKDIR/ncrtagent/$h/";
	die unless $r == 0;
}

#### read settings generated by plugins
my %hosttype2opts         = ( 'virtual' => {
	'display_name' => 'Virtual:%hostname%',
	'address' => '127.0.0.1',
} );
my %hosttype2templateopts = ( 'virtual' => {
} );
my $f = "$WORKDIR/hosttypes";
if( open my $h, '<', $f ){
	while( <$h> ){
		my ($hosttype, $opts, $templateopts) = parse_itementry $_;
		print "$f:$.:$opts\n" if !defined $hosttype && defined $opts;
		next unless $hosttype;
		$hosttype2opts{$hosttype} = $opts;
		$hosttype2templateopts{$hosttype} = $templateopts;
	}
	close $h;
}
my %service2opts;
my %service2templateopts;
my $f = "$WORKDIR/services";
if( open my $h, '<', $f ){
	while( <$h> ){
		my ($service, $opts, $templateopts) = parse_itementry $_;
		print "$f:$.:$opts\n" if !defined $service && defined $opts;
		next unless $service;
		$service2opts{$service} = $opts;
		$service2templateopts{$service} = $templateopts;
	}
	close $h;
}
my %host2services;
my @host_service_opts;
my $f = "$WORKDIR/host2service";
if( open my $h, '<', $f ){
	while( <$h> ){
		my ($host, $service, $opts) = parse_mapping $_;
		print "$f:$.:$opts\n" if !defined $host && defined $opts;
		next unless $host;
		$host2services{$host}->{$service} = 1;
		push @host_service_opts, [$host, $service, $opts];
	}
	close $h;
}
my %host2contact;
my $f = "$WORKDIR/host2contact";
if( open my $h, '<', $f ){
	while( <$h> ){
		my ($host, $contact, $opts) = parse_host2item_mapping $_;
		print "$f:$.:$opts\n" if !defined $host && defined $opts;
		next unless $host;
		push @{$host2contact{$host}}, $contact;
	}
	close $h;
}
my %hostservice2contact;
my $f = "$WORKDIR/hostservice2contact";
if( open my $h, '<', $f ){
	while( <$h> ){
		my ($host, $service, $contact, $opts) = parse_hostservice2item_mapping $_;
		print "$f:$.:$opts\n" if !defined $host && defined $opts;
		next unless $host;
		push @{$hostservice2contact{$host, $service}}, $contact;
	}
	close $h;
}
my %group2host;
my $f = "$WORKDIR/host2group";
if( open my $h, '<', $f ){
	while( <$h> ){
		my ($host, $group, $opts) = parse_host2item_mapping $_;
		print "$f:$.:$opts\n" if !defined $host && defined $opts;
		next unless $host;
		push @{$group2host{$group}}, $host;
	}
	close $h;
}
my %group2hostservice;
my $f = "$WORKDIR/hostservice2group";
if( open my $h, '<', $f ){
	while( <$h> ){
		my ($host, $service, $group, $opts) = parse_hostservice2item_mapping $_;
		print "$f:$.:$opts\n" if !defined $host && defined $opts;
		next unless $host;
		push @{$group2hostservice{$group}}, [$host, $service];
	}
	close $h;
}
my %users;
my $f = "$WORKDIR/users";
if( open my $h, '<', $f ){
	while( <$h> ){
		my ($user, $opts) = parse_itementry $_;
		print "$f:$.:$opts\n" if !defined $user && defined $opts;
		next unless $user;
		$users{$user} = $opts;
	}
	close $h;
}
my %addresses;
my $f = "$WORKDIR/addresses";
if( open my $h, '<', $f ){
	while( <$h> ){
		my ($address, $opts) = parse_addressentry $_;
		print "$f:$.:$opts\n" if !defined $address && defined $opts;
		next unless $address;
		$addresses{$address} = $opts;
	}
	close $h;
}

#### write template settings
sub generate_settings (\%\%) {
	my ($opts, $params) = @_;
	my @settings;
	foreach my $k ( sort keys %{$opts} ){
		my $v = $opts->{$k};
		push @settings, sprintf "\t%-23s\t%s\n",
			$k, expand_params $v, %$params;
	}
	return @settings;
}

if( open my $f, '>>', "$WORKDIR/ncrt_hosttemplates.cfg" ){
	foreach my $hosttype ( sort keys %hosttype2templateopts ){
		my %param = ( 'hosttype' => $hosttype );
		my $ht_topt = $hosttype2templateopts{$hosttype};
		my @settings = generate_settings %$ht_topt, %param;
		####
		print $f
		"define host {\n",
		"	name			ncrt-hosttype-$hosttype\n",
		"	use			ncrt-generic-host\n",
		"	check_command		ncrtmaster_hostcheck\n",
		@settings,
		"	register		0\n",
		"}\n";
	}
	close $f;
}
if( open my $f, '>>', "$WORKDIR/ncrt_servicetemplates.cfg" ){
	foreach my $service ( sort keys %service2templateopts ){
		my %p = ( 'service' => $service );
		my $s_topt = $service2templateopts{$service};
		my @settings = generate_settings %$s_topt, %p;
		####
		print $f
		"define service {\n",
		"	name			ncrtagent-$service\n",
		"	check_command		ncrtagent_check\n",
		"	_service		$service\n",
		"	use			ncrt-generic-service\n",
		@settings,
		"	register		0\n",
		"}\n",
		"define service {\n",
		"	name			ncrtmaster-$service\n",
		"	check_command		ncrtmaster_check\n",
		"	_service		$service\n",
		"	use			ncrt-generic-service\n",
		@settings,
		"	register		0\n",
		"}\n";
	}
	close $f;
}

#### write settings
sub generate_shortnamelist ($) {
	return '' unless defined $_[0];
	return join ',', @{$_[0]};
}

if( open my $f, '>', "$WORKDIR/ncrt_hosts.cfg" ){
	foreach my $host ( sort keys %host2services ){
		my $hosttype = $host2hosttype{$host};
		my %p = ( 'hostname' => $host, 'hosttype' => $hosttype );
		my $ht_opt = $hosttype2opts{$hosttype};
		my @settings = generate_settings %$ht_opt, %p;
		my $contacts = generate_shortnamelist $host2contact{$host};
		my $e_host = uri_escape_utf8($host);
		####
		print $f
		"define host {\n",
		"	host_name		$host\n",
		"	use			ncrt-hosttype-$hosttype\n",
		"	contacts		$contacts\n",
		"	_urlencoded		$e_host\n",
		"	_hosttype		$hosttype\n",
		@settings,
		"}\n";
	}
	close $f;
}
my %hscount;
if( open my $f, '>', "$WORKDIR/ncrt_services.cfg" ){
	foreach my $host_service_opts ( @host_service_opts ){
		my ($host, $service, $hs_opts) = @$host_service_opts;
		my $hosttype = $host2hosttype{$host};
		my $servicetype = $hosttype eq 'virtual' ? 'ncrtmaster' : 'ncrtagent';
		# servicedesc = servicebase + "." + serviceindex
		my $servicebase = $service;
		my $serviceindex;
		if( $service =~ m"^(\w+)(?:\.(\d+))?$" ){
			$servicebase  = $1;
			$serviceindex = $2;
		}
		my $s_opt = $service2opts{$servicebase};
		my %p = ( 'hostname' => $host, 'hosttype' => $hosttype,
			  'servicebase' => $servicebase,
			  'serviceindex' => $serviceindex );
		my @settings = (
			generate_settings(%$s_opt, %p),
			generate_settings(%$hs_opts, %p)
		);
		my $contacts = generate_shortnamelist $hostservice2contact{$host, $service};
		my $e_service = uri_escape_utf8($service);
		####
		print $f
		"define service {\n",
		"	host_name		$host\n",
		"	service_description	$service\n",
		"	use			$servicetype-$servicebase\n",
		"	contacts		$contacts\n",
		"	_urlencoded	 	$e_service\n",
		"	_base			$servicebase\n",
		"	_index			$serviceindex\n",
		@settings,
		"}\n";
	}
	close $f;
}
my $f = "$WORKDIR/ncrt_hostgroups.cfg";
if( open my $h, '>', $f ){
	foreach my $group ( sort keys %group2host ){
		my $hosts = generate_shortnamelist $group2host{$group};
		print $h
		"define hostgroup {\n",
		"	hostgroup_name		$group\n",
		"	members			$hosts\n",
		"}\n";
	}
	close $h;
}
my $f = "$WORKDIR/ncrt_servicegroups.cfg";
if( open my $h, '>', $f ){
	foreach my $group ( sort keys %group2hostservice ){
		my $hostservices;
		foreach my $hostservice ( @{$group2hostservice{$group}} ){
			$hostservices .= ',' if $hostservices;
			$hostservices .= $hostservice->[0] . ',' . $hostservice->[1];
		}
		print $h
		"define servicegroup {\n",
		"	servicegroup_name	$group\n",
		"	members			$hostservices\n",
		"}\n";
	}
	close $h;
}
my $f = "$WORKDIR/ncrt_users.cfg";
if( open my $h, '>', $f ){
	foreach my $user ( sort keys %users ){
		print $h
		"define contact {\n",
		"	contact_name		$user\n",
		"	host_notification_commands	ncrtmaster_do_nothing\n",
		"	service_notification_commands	ncrtmaster_do_nothing\n",
		"	host_notification_period	ncrt_notime\n",
		"	service_notification_period	ncrt_notime\n",
		"	host_notification_options	n\n",
		"	service_notification_options	n\n",
		"	host_notifications_enabled	0\n",
		"	service_notifications_enabled	0\n",
		"}\n";
	}
	close $h;
}
my $f = "$WORKDIR/ncrt_addresses.cfg";
if( open my $h, '>', $f ){
	foreach my $address ( sort keys %addresses ){
		print $h
		"define contact {\n",
		"	contact_name			$address\n",
		"	email				$address\n",
		"	host_notification_commands	ncrtmaster_do_nothing\n",
		"	service_notification_commands	ncrtmaster_alertspooler\n",
		"	host_notification_period	ncrt_anytime\n",
		"	service_notification_period	ncrt_anytime\n",
		"	host_notification_options	n\n",
		"	service_notification_options	w,u,c,r\n",
		"	host_notifications_enabled	0\n",
		"	service_notifications_enabled	1\n",
		"}\n";
	}
	close $h;
}

####
my %service2conf;
my $f = "$WORKDIR/service2conf";
if( open my $h, '<', $f ){
	while( <$h> ){
		chomp;
		my ($service, $conf) = split m"\s+";
		push @{$service2conf{$service}}, $conf;
	}
	close $h;
}

foreach my $host ( @ncrtagents ){
	my @confs;
	foreach my $service ( keys %{$host2services{$host}} ){
		next unless defined $service2conf{$service};
		push @confs, @{$service2conf{$service}};
	}

	foreach my $conf ( @confs ){
		my @rules;
		if( open my $h, '<', "$CONFDIR/service/$conf" ){
			while( <$h> ){
				chomp;
				next if m"^\s*(#|$)";
				die unless m"^(\S+)\s+(.*)";
				push @rules, [qr"$1", $2];
			}
			close $h;
		}
		if( open my $h, '>', "$WORKDIR/ncrtagent/$host/service/$conf" ){
			foreach my $rule ( @rules ){
				next unless $host =~ $rule->[0];
				print $h $rule->[1], "\n";
			}
			close $h;
		}
	}
}

while( my ($host, $hosttype) = each %host2hosttype ){
	next unless $hosttype eq 'virtual';
	my @confs;
	foreach my $service ( keys %{$host2services{$host}} ){
		# service = servicebase + "." + serviceindex
		my $servicebase = $service;
		my $serviceindex;
		if( $service =~ m"^(\w+)(?:\.(\d+))?$" ){
			$servicebase  = $1;
			$serviceindex = $2;
		}
		next unless defined $service2conf{$servicebase};
		push @confs, @{$service2conf{$servicebase}};
	}
	foreach my $conf ( @confs ){
		my @rules;
		if( open my $h, '<', "$CONFDIR/service/$conf" ){
			while( <$h> ){
				chomp;
				next if m"^\s*(#|$)";
				die unless m"^(\S+)\s+(.*)";
				push @rules, [qr"$1", $2];
			}
			close $h;
		}
		foreach my $master ( @ncrtmasters ){
			if( open my $h, '>', "$WORKDIR/ncrtmaster/$master/service/$conf.$host" ){
				foreach my $rule ( @rules ){
					next unless $host =~ $rule->[0];
					print $h $rule->[1], "\n";
				}
				close $h;
			}
		}
	}
}

#exit 0;

####
my $tags = 'common';
if   ( $AGENTPACKAGE eq 'nrpe' )   { $tags .= ',nrpe'; }
elsif( $AGENTPACKAGE eq 'nrpe-ng' ){ $tags .= ',nrpe-ng'; }
else{ die; }
if   ( $NRPETLS eq 'yes' ){ $tags .= ',nrpetls'; }
elsif( $NRPETLS eq 'no' ) {}
else{ die; }

#### run ansible for nagios master
my $hosts = join( ',', @ncrtmasters, '' );
my $options = sprintf "%s -e WORKDIR=%s -e TOOLHOME=%s -i %s -t \"%s\"",
	$ncrtconf{'ANSIBLEOPTIONS'}, $WORKDIR, $TOOLHOME, $hosts, $tags;
my $r = system "ansible-playbook -v $options $PLAYBOOKSDIR/build_ncrtmaster.yml";
die unless $r == 0;

#### run ansible for nrpe agent
my $hosts = join( ',', @ncrtagents, '' );
my $options = sprintf "%s -e WORKDIR=%s -e TOOLHOME=%s -i %s -t \"%s\"",
	$ncrtconf{'ANSIBLEOPTIONS'}, $WORKDIR, $TOOLHOME, $hosts, $tags;
my $r = system "ansible-playbook -v $options $PLAYBOOKSDIR/build_ncrtagent.yml";
die unless $r == 0;




