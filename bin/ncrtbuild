#!/usr/bin/perl

use Cwd 'abs_path';
our $TOOLHOME;
BEGIN {
	$0 =~ m"^(.*)/";
	$TOOLHOME = abs_path "$1/..";
	while( $TOOLHOME =~ s{(^|/)[^\.][^/]*/\.\.(/|$)}{$1} ){}
	$TOOLHOME =~ s{/$}{};
}
use lib "$TOOLHOME/lib/perl5";

use NCRTBuild::Common;
use NCRTBuild::Configuration;
use NCRTBuild::WorkDirectory;
use NCRTBuild::HostServiceValidator;
use NCRTBuild::PluginConfigValidator;
use NCRTBuild::MeasurementNaemonDirectiveValidator;
use NCRTBuild::MonitoringGroupValidator;
use NCRTBuild::ContactValidator;
use NCRTBuild::NaemonDefinitionCollection;
use NCRTBuild::ThresholdRuleCollection;
use NCRTBuild::FilterRuleCollection;
use NCRTBuild::SectionConfigCollection;

exit 0;

use strict;
use Getopt::Long;
use URI::Escape;
use Socket;
use Template;

our $TMPDIR = "/tmp";
our $WORKDIR = "$TMPDIR/ncrt_work.$$";

our $PLUGINSDIR = "$TOOLHOME/plugins";
our $CONFDIR = "$TOOLHOME/conf";
our $PLAYBOOKSDIR = "$TOOLHOME/playbooks";
our $SRCDIR = "$TOOLHOME/src";
 
my $workdir;
my $master_only;
my $agent_only;
my $target_agent = qr"^.*$";
my $target_master = qr"^.*$";
my $threshold_only;
my $dryrun;
my $quick;
my $no_cleanup;
GetOptions (
	'workdir=s' => \$workdir,
	'master-only' => \$master_only,
	'agent-only' => \$agent_only,
	'target-agent=s' => sub { my $re = $_[1]; $target_agent = qr"^$re$"; },
	'target-master=s' => sub { my $re = $_[1]; $target_master = qr"^$re$"; },
	'threshold-only' => \$threshold_only,
	'no-cleanup' => \$no_cleanup,
	'dryrun' => \$dryrun,
	'quick' => \$quick,
) or die "Invalid command line options, stopped";


my %plan = (
	#### Initilalize Section
	'Step0'  => 1, # Step0.  read ncrtbuilder conf (*)
	'Step1'  => 1, # Step1.  generate packages and certs
	'Step2'  => 1, # Step2.  create work dir structure
	'Step3'  => 1, # Step3.  run plugins
	'Step4'  => 1, # Step4.  read confs generated by plugins in work dir (*)
	#### Naemon Configuration Section
	'Step5'  => 1, # Step5.  parse Naemon configs of measurement plugins
	#### Common Configuration Section
	'Step6'  => 1, # Step6.  generate thresholds settings into ncrtmastercommon dir.
	'Step7'  => 1, # Step7.  generate metricfilter / thresholdfilter settings into ncrtmastercommon dir.
	'Step8'  => 1, # Step8.  copy ncrtmastercommon contents into each ncrtmaster dir.
	#### Host Specific Configuration Section
	'Step9'  => 1, # Step9.  generate plugin settings of mastertype into ncrtmaster dir.
	'Step10' => 1, # Step10. generate plugin settings of agenttype into ncrtagent dir.
	'Step11' => 1, # Step11. generate plugin settings of agent measurement into ncrtagent dir.
	'Step12' => 1, # Step12. generate plugin settings of agentless measurement into ncrtmaster dir.
	'Step13' => 1, # Step13. generate plugin settings of indirect measurement into ncrtagent dir.
	'Step14' => 1, # Step14. generate plugin settings of contact / reporter into ncrtmaster dir.
	#### Deployment Section
	'Step17' => 1, # Step17. prepair deployment (generate settings of masters)
	'Step18' => 1, # Step18. prepair deployment (generate hosts.yml / vars.yml)
	'Step19' => 1, # Step19. deploy ncrtmasters
	'Step20' => 1, # Step20. deploy ncrtagents
	'Step21' => 1, # Step21. clean up work dir
);

if( $dryrun ){ $plan{Step20} = 0; $plan{Step19} = 0; }
if( $master_only ){ $plan{Step20} = 0; }
if( $agent_only ) { $plan{Step19} = 0; }
if( $workdir ){ $WORKDIR = $workdir; }
if( $no_cleanup ){ $plan{Step21} = 0; }

######## Step0. ########

my $conf = NCRTBuild::Configuration->new;
if( $plan{Step0} ){
	$conf->load( $CONFDIR, $PLUGINSDIR );
}

######## Step1. ########

if( $plan{Step1} ){
	$conf->build( $SRCDIR );
}

######## Step2. ########

my $work = NCRTBuild::WorkDirectory->new;
if( $plan{Step2} ){
	$work->create( $WORKDIR );
}

######## Step3. ########

if( $plan{Step3} ){
	#### run agenttype plugins
	foreach my $e ( $conf->listAgentTypePlugins ){
		print "$PLUGINSDIR/$e $CONFDIR $WORKDIR\n";
		system_or_die "$PLUGINSDIR/$e $CONFDIR $WORKDIR";
	}
	foreach my $h ( @ncrtagents ){
		mkdir_or_die "$WORKDIR/ncrtagent/$h/plugins";
		mkdir_or_die "$WORKDIR/ncrtagent/$h/conf";
		mkdir_or_die "$WORKDIR/ncrtagent/$h/conf/agent";
		mkdir_or_die "$WORKDIR/ncrtagent/$h/conf/indirect";
		mkdir_or_die "$WORKDIR/ncrtagent/$h/conf/threshold";
		mkdir_or_die "$WORKDIR/ncrtagent/$h/conf/metricfilter";
		mkdir_or_die "$WORKDIR/ncrtagent/$h/conf/thresholdfilter";
		mkdir_or_die "$WORKDIR/ncrtagent/$h/conf/agenttype";
	}

	#### run mastertype plugins
	foreach my $e ( $conf->listMasterTypePlugins ){
		print "$PLUGINSDIR/$e $CONFDIR $WORKDIR\n";
		system_or_die "$PLUGINSDIR/$e $CONFDIR $WORKDIR";
	}
	foreach my $h ( @ncrtmasters ){
		mkdir_or_die "$WORKDIR/ncrtmaster/$h/plugins";
		mkdir_or_die "$WORKDIR/ncrtmaster/$h/conf";
		mkdir_or_die "$WORKDIR/ncrtmaster/$h/conf/agentless";
		mkdir_or_die "$WORKDIR/ncrtmaster/$h/conf/indirect";
		mkdir_or_die "$WORKDIR/ncrtmaster/$h/conf/reporter";
		mkdir_or_die "$WORKDIR/ncrtmaster/$h/conf/threshold";
		mkdir_or_die "$WORKDIR/ncrtmaster/$h/conf/metricfilter";
		mkdir_or_die "$WORKDIR/ncrtmaster/$h/conf/thresholdfilter";
		mkdir_or_die "$WORKDIR/ncrtmaster/$h/conf/mastertype";
	}

	#### run measurement plugins
	foreach my $e ( $conf->listAgentPlugins ){
		print "$PLUGINSDIR/$e $CONFDIR $WORKDIR\n";
		system_or_die "$PLUGINSDIR/$e $CONFDIR $WORKDIR";
	}
	foreach my $e ( $conf->listAgentlessPlugins ){
		print "$PLUGINSDIR/$e $CONFDIR $WORKDIR\n";
		system_or_die "$PLUGINSDIR/$e $CONFDIR $WORKDIR";
	}
	foreach my $e ( $conf->listIndirectPlugins ){
		print "$PLUGINSDIR/$e $CONFDIR $WORKDIR\n";
		system_or_die "$PLUGINSDIR/$e $CONFDIR $WORKDIR";
	}

	#### run other plugins
	foreach my $e ( $conf->listContactPlugins ){
		print "$PLUGINSDIR/$e $CONFDIR $WORKDIR\n";
		system_or_die "$PLUGINSDIR/$e $CONFDIR $WORKDIR";
	}
	foreach my $e ( $conf->listReporterPlugins ){
		print "$PLUGINSDIR/$e $CONFDIR $WORKDIR\n";
		system_or_die "$PLUGINSDIR/$e $CONFDIR $WORKDIR";
	}
}

######## Step4. ########

my $pcvalidator  = NCRTBuild::PluginConfigValidator->new;
my $hsvalidator  = NCRTBuild::HostServiceValidator->new;
my $mndvalidator = NCRTBuild::MeasurementNaemonDirectiveValidator->new;
my $mgvalidator  = NCRTBuild::MonitoringGroupValidator->new;
my $cvalidator   = NCRTBuild::ContactValidator->new;
if( $plan{Step4} ){
	$work->load();
	$pcvalidator ->load( $conf, $work );
	$hsvalidator ->load( $conf, $work );
	$mndvalidator->load( $conf, $work );
	$mgvalidator ->load( $conf, $work );
	$cvalidator  ->load( $conf, $work );
}

######## Step5. ########

my $ndef = NCRTBuild::NaemonDefinitionCollection->new;
if( $plan{Step5} ){
	my @rules = $conf->loadNaemonDirectiveRules;

	my @agenttypetemplate   = $mndvalidator->listAgentTypeTemplate;
	my @measurementtemplate = $mndvalidator->listMeasurementTemplate;
	my @agenthost    = $ndvalidator->listAgentHost;
	my @host_service = $ndvalidator->listHostService;

	my @hostgroup    = $mgvalidator->listHostGroup;
	my @servicegroup = $mgvalidator->listServiceGroup;

	my @contact      = $cvalidator->listContact;

	$ndef->setAgentTypeTemplate  ( @agenttypetemplate );
	$ndef->setMeasurementTemplate( @measurementtemplate );
	$ndef->setAgentHost          ( @agenthost );
	$ndef->setHostService        ( @host_service );

	$ndef->setWorkDirectory( $work );
	$ndef->write;
}


######## Step6. ########

my $thr = NCRTBuild::ThresholdRuleCollection->new;
if( $plan{Step6} ){
	my @rules = $conf->loadThresholdRules;

	my @host_service = $hsvalidator->listHostService;
	$thr->parse( \@host_service, @rules );

	$thr->setWorkDirectory( $work );
	$thr->write;
}


######## Step7. ########

my $metfilter = NCRTBuild::FilterRuleCollection->new;
my $thrfilter = NCRTBuild::FilterRule->new;
if( $plan{Step7} ){
	my @host_service = $hsvalidator->listHostService;

	my @filterrules = $conf->loadThreholdFilterRules;
	$metfilter->parse( \@host_service, @filterrules );
	$metfilter->setWorkDirectory( $work );
	$metfilter->write( "metric" );

	my @filterrules = $conf->loadMetricFilterRules;
	$thrfilter->parse( \@host_service, @filterrules );
	$thrfilter->setWorkDirectory( $work );
	$thrfilter->write( "threshold" );
}


######## Step8. ########


######## Step9. ########

######## Step10. ########

######## Step11. ########

if( $plan{Step11} ){
	my $sectionconfig = NCRTBuild::SectionConfigCollection->new;

	my @measurement = $conf->listAgentPlugins;
	foreach my $measurement ( @measurement ){
		my @host_service = $hsvalidator->listHostServiceUsingBackend( $measurement );
		my %pluginconfig = $pcvalidator->loadPluginConfigOf( 'agent', $measurement, 'section' );
		$sectionconfig->parse( \@host_service, %pluginconfig );
	}

	$sectionconfig->setWorkDirectory( $work );
	$sectionconfig->writeAsAgent;
}


######## Step12. ########

if( $plan{Step12} ){
	my $sectionconfig = NCRTBuild::SectionConfigCollection->new;

	my @measurement = $conf->listAgentlessPlugins;
	foreach my $measurement ( @measurement ){
		my @host_service = $hsvalidator->listHostServiceUsingBackend( $measurement );
		my %pluginconfig = $pcvalidator->loadPluginConfigOf( 'agentless', $measurement, 'section' );
		$sectionconfig->parse( \@host_service, %pluginconfig );
	}

	my @masterhosts = $work->listMasterHosts;
	$sectionconfig->setWorkDirectory( $work );
	$sectionconfig->writeAsMaster( @masterhosts );
}


######## Step13. ########

if( $plan{Step13} ){
	my $sectionconfig = NCRTBuild::SectionConfig->new;

	my @measurement = $conf->listIndirectPlugins;
	foreach my $measurement ( @measurement ){
		my @host_service = $hsvalidator->listHostServiceUsingBackend( $measurement );
		my %pluginconfig = $pcvalidator->loadPluginConfigOf( 'indirect', $measurement, 'section' );
		$sectionconfig->parse( \@host_service, %pluginconfig );
	}

	my @masterhosts = $work->listMasterHosts;
	$sectionconfig->setWorkDirectory( $work );
	$sectionconfig->writeAsMaster( @masterhosts );
}


######## Step14. ########

my %masterhost2masterparams;
if( $plan{Step14} ){
	#### masterhosts conf
	my $f = "$WORKDIR/masterhosts";
	open my $h, "<", $f or do {
		die "$f: cannot open, stopped";
	};
	while( <$h> ){
		chomp;
		next if m"^\s*(#|$)";
		my ($host, $mastertype, @param) = split m"\s+";
		my $g = "$WORKDIR/ncrtmaster/$host/ncrtmaster_$mastertype.conf";
		open my $i, ">", $g or do {
			die "$g: cannot open, stopped";
		};
		foreach my $p ( @param ){
			print $i "$p\n";
			die unless $p =~ m"^(\w+)=(.*)$";
			my $k = $1;
			my $v = $2;
			$masterhost2masterparams{$host}->{$k} = $v;
		}
		close $i;
	}
	close $h;

	####
	my @masterconfs;
	my $f = "$WORKDIR/masterconfs";
	open my $h, '<', $f or do {
		die "$f: cannot open, stopped";
	};
	while( <$h> ){
		chomp;
		die unless -f "$CONFDIR/$_";
		push @masterconfs, $_;
	}
	close $h;

	####
	my $f = "$WORKDIR/reporters";
	open my $h, '>', $f or do {
		die "$f: cannot open, stopped";
	};
	foreach my $i ( @reporter_plugins ){
		die unless $i =~ m"^ncrtbuild_reporter_(.*)$";
		print $h "$1\n";
	}
	close $h;

	####
	foreach my $master ( @ncrtmasters ){
		foreach my $f ( "reporters" ){
			system_or_die "cp $WORKDIR/$f $WORKDIR/ncrtmaster/$master/$f";
		}
	
		foreach my $f ( "ncrtbuild.conf", @masterconfs ){
			system_or_die "cp $CONFDIR/$f $WORKDIR/ncrtmaster/$master/$f";
		}
	}
}

######## Step18. ########

if( $plan{Step18} ){
	####
	my $ncrtmasterhosts = join( ',', @ncrtmasters );

	my $f = "$WORKDIR/vars.yml";
	open my $h, '>', $f or do {
		die "$f: cannot open, stopped";
	};
	print $h <<"EOF";
---

 HELPERURL:           "$HELPERURL"
 HELPERURL_JUMP_TO_DASHBOARD: "$HELPERURL_JUMP_TO_DASHBOARD"
 HELPERURL_SEARCH_PANELS:     "$HELPERURL_SEARCH_PANELS"
 NCRTAGENTHOME:       "$NCRTAGENTHOME"
 NCRTMASTERHOME:      "$NCRTMASTERHOME"
 NAEMON2INFLUX_DEB:   "$NAEMON2INFLUX_DEB"
 GRAFANA_DASHBOARD_HELPER_DEB: "$GRAFANA_DASHBOARD_HELPER_DEB"

EOF
	while( my ($k, $v) = each %ncrtconf ){
		next unless $k =~ m"^(AGENT|MASTER)TYPE_[A-Z]+_";
		print $h " $k: \"$v\"\n";
	}
	close $h;
}

#exit 0;

######## Step19. ########

sub hash2yaml ($) {
	my ($params) = @_;
	my @params;
	foreach my $k ( sort keys %$params ){
		my $v = $$params{$k};
		push @params, "\"$k\":\"$v\"";
	}
	return "{" . join(", ", @params) . "}";
}

sub generate_hosts_yml ($$$$) {
	my ($name, $hosttype2hosts, $host2params, $regexp) = @_;

	my $hosts_yml = "$WORKDIR/$name.yml";
	open my $h, '>', $hosts_yml or do {
		die "$hosts_yml: cannot open, stopped";
	};
	print $h
		"all:\n",
		"  children:\n",
		"    AllHosts:\n",
		"      children:\n";
	foreach my $hosttype ( sort keys %$hosttype2hosts ){
		print $h "        $hosttype.__HOSTTYPE__:\n";
	}
	foreach my $hosttype ( sort keys %$hosttype2hosts ){
		my $hosts = $$hosttype2hosts{$hosttype};
		print $h
			"    $hosttype.__HOSTTYPE__:\n",
			"      hosts:\n";
		foreach my $host ( sort @$hosts ){
			next unless $host =~ $regexp;
			my $yaml_hash = hash2yaml $$host2params{$host};
			print $h "        $host: $yaml_hash\n";
		}
	}
	close $h;
}

sub generate_playbook ($$) {
	my ($playbookname, $hosttypes) = @_;

	my $tt = Template->new({
		INCLUDE_PATH => $PLAYBOOKSDIR,
		OUTPUT_PATH  => $WORKDIR,
	}) or do {
		die "$playbookname.yml.tt: cannot read, stopped";
	};

	my $output;
	my %vars = (
		TOOLHOME    => $TOOLHOME,
		WORKDIR     => $WORKDIR,
		HOSTTYPES   => $hosttypes,
		file_exists => sub { return -f $_[0]; },
	);
	$tt->process( "$playbookname.yml.tt", \%vars, "$playbookname.yml" ) or do {
        	die "$playbookname.yml: " . $tt->error() . ", stopped";
	};
}

####
my $tags = 'common';
unless( $quick ){
	$tags .= ',commoninstall';
}

#### run ansible for nagios master
generate_hosts_yml 'master_hosts', \%mastertype2masterhosts, \%masterhost2masterparams,
	$target_master;
generate_playbook 'build_ncrtmaster', \@mastertypes;

my $options = sprintf "%s -e WORKDIR=%s -e TOOLHOME=%s -t \"%s\"",
	$ncrtconf{'ANSIBLEOPTIONS'}, $WORKDIR, $TOOLHOME, $tags;

if( $plan{Step19} ){
	my $cmd = "ansible-playbook -v" .
		" -i $WORKDIR/master_hosts.yml" .
		" $options $WORKDIR/build_ncrtmaster.yml";
	print $cmd;
	system_or_die $cmd;
}

######## Step20. ########

#### run ansible for nrpe agent
generate_hosts_yml 'agent_hosts', \%agenttype2agenthosts, \%agenthost2agentparams,
	$target_agent;
generate_playbook 'build_ncrtagent', \@agenttypes;

my $options = sprintf "%s -e WORKDIR=%s -e TOOLHOME=%s -t \"%s\"",
	$ncrtconf{'ANSIBLEOPTIONS'}, $WORKDIR, $TOOLHOME, $tags;

if( $plan{Step20} ){
	my $cmd = "ansible-playbook -v" .
		" -i $WORKDIR/agent_hosts.yml" .
		" $options $WORKDIR/build_ncrtagent.yml";
	print $cmd;
	system_or_die $cmd;
}

######## Step21. ########
END {
	if( $plan{Step21} ){
		rm_r $WORKDIR if -d $WORKDIR;
	}
}


