#!/usr/bin/perl

use Cwd 'abs_path';
our $TOOLHOME;
BEGIN {
	$0 =~ m"^(.*)/";
	$TOOLHOME = abs_path "$1/..";
	while( $TOOLHOME =~ s{(^|/)[^\.][^/]*/\.\.(/|$)}{$1} ){}
	$TOOLHOME =~ s{/$}{};
}
use lib "$TOOLHOME/lib/perl5";

use NCRTBuild::Common;
use NCRTBuild::PluginConfigDir;
use NCRTBuild::NCRTConfigDir;
use NCRTBuild::PluginWorkDir;
use NCRTBuild::PackageBuilder;
use NCRTBuild::PlaybookExecuter;
use NCRTBuild::DistributedPluginConfigDir;
use NCRTBuild::DistributedNaemonDefinitionDir;
use NCRTBuild::DistributedNCRTConfigDir;
use NCRTBuild::PluginExecuter;
use NCRTBuild::PluginWorkFileValidator;
use NCRTBuild::PluginConfigValidator;
use NCRTBuild::ThresholdGenerator;
use NCRTBuild::Generic::SimpleValueGenerator;
use NCRTBuild::Generic::KeyValueGenerator;
use NCRTBuild::NaemonDefinitionDistributor;
use NCRTBuild::PluginConfigGenerator::Simple;
use NCRTBuild::PluginConfigGenerator::HostService;
use NCRTBuild::PluginConfigDistributor::Simple;
use NCRTBuild::PluginConfigDistributor::HostServiceForAgent;
use NCRTBuild::PluginConfigDistributor::HostServiceForAgentless;
use NCRTBuild::PluginConfigDistributor::HostServiceForIndirect;
use NCRTBuild::ThresholdRuleDistributor;
use NCRTBuild::Generic::FilterRuleDistributor;
use NCRTBuild::BackendHostServiceDistributor;
use NCRTBuild::ResourceDistributor;

use strict;
use Getopt::Long;
use URI::Escape;
use Socket;
use Template;
use Carp::Always;

our $TMPDIR = "/tmp";
our $WORKDIR = "$TMPDIR/ncrt_work.$$";

our $PLUGINDIR     = "$TOOLHOME/plugins";
our $PLUGINCONFDIR = "$TOOLHOME/conf/plugins";
our $NCRTCONFDIR   = "$TOOLHOME/conf/ncrt";
our $FILTERDIR     = "$TOOLHOME/filters";
our $SRCDIR = "$TOOLHOME/src";
 
my $workdir;
my $master_only;
my $agent_only;
my $target_agent = qr"^.*$";
my $target_master = qr"^.*$";
my $threshold_only;
my $dryrun;
my $quick;
my $no_cleanup;
GetOptions (
	'workdir=s' => \$workdir,
	'master-only' => \$master_only,
	'agent-only' => \$agent_only,
	'target-agent=s' => sub { my $re = $_[1]; $target_agent = qr"^$re$"; },
	'target-master=s' => sub { my $re = $_[1]; $target_master = qr"^$re$"; },
	'threshold-only' => \$threshold_only,
	'no-cleanup' => \$no_cleanup,
	'dryrun' => \$dryrun,
	'quick' => \$quick,
) or die "Invalid command line options, stopped";


my %plan = (
	#### Initilalize Section
	'Step0'  => 1, # Step0.  read ncrtbuilder conf (*)
	'Step1'  => 1, # Step1.  generate packages and certs
	'Step2'  => 1, # Step2.  create work dir structure
	'Step3'  => 1, # Step3.  run plugins
	'Step4'  => 1, # Step4.  read confs generated by plugins in work dir (*)
	#### Naemon Configuration Section
	'Step5'  => 1, # Step5.  parse Naemon configs of measurement plugins
	#### Common Configuration Section
	'Step6'  => 1, # Step6.  generate thresholds settings into ncrtmastercommon dir.
	'Step7'  => 1, # Step7.  generate metricfilter / thresholdfilter settings into ncrtmastercommon dir.
	'Step8'  => 1, # Step8.  copy ncrtmastercommon contents into each ncrtmaster dir.
	#### Host Specific Configuration Section
	'Step9'  => 1, # Step9.  generate plugin settings of mastertype into ncrtmaster dir.
	'Step10' => 1, # Step10. generate plugin settings of agenttype into ncrtagent dir.
	'Step11' => 1, # Step11. generate plugin settings of agent measurement into ncrtagent dir.
	'Step12' => 1, # Step12. generate plugin settings of agentless measurement into ncrtmaster dir.
	'Step13' => 1, # Step13. generate plugin settings of indirect measurement into ncrtagent dir.
	'Step14' => 1, # Step14. generate plugin settings of contact / reporter into ncrtmaster dir.
	#### Deployment Section
	'Step17' => 1, # Step17. prepair deployment (generate settings of masters)
	'Step18' => 1, # Step18. prepair deployment (generate hosts.yml / vars.yml)
	'Step19' => 1, # Step19. deploy ncrtmasters
	'Step20' => 1, # Step20. deploy ncrtagents
	'Step21' => 1, # Step21. clean up work dir
);

#if( $dryrun ){ $plan{Step20} = 0; $plan{Step19} = 0; }
if( $master_only ){ $plan{Step20} = 0; }
if( $agent_only ) { $plan{Step19} = 0; }
if( $workdir ){ $WORKDIR = $workdir; }
if( $no_cleanup ){ $plan{Step21} = 0; }

our $PLUGINWORKDIR            = "$WORKDIR/plugins";
our $DISTRIBUTEDAGENTBASEDIR  = "$WORKDIR/ncrtagent";
our $DISTRIBUTEDMASTERBASEDIR = "$WORKDIR/ncrtmaster";
our $PLAYBOOKDIR              = "$WORKDIR/playbooks";

######## Step1. ########

my $ncrtconfdir        = NCRTBuild::NCRTConfigDir->new;
my $pluginconfdir      = NCRTBuild::PluginConfigDir->new;
my $pluginworkdir      = NCRTBuild::PluginWorkDir->new;
my $distapluginconfdir = NCRTBuild::DistributedPluginConfigDir->new;
my $distmpluginconfdir = NCRTBuild::DistributedPluginConfigDir->new;
my $distnaemondefdir   = NCRTBuild::DistributedNaemonDefinitionDir->new;
my $distncrtconfdir    = NCRTBuild::DistributedNCRTConfigDir->new;
my $builder    = NCRTBuild::PackageBuilder->new;
my $pluginexec = NCRTBuild::PluginExecuter->new;
if( $plan{Step1} ){
	$ncrtconfdir  ->setPath( $NCRTCONFDIR );
	$pluginconfdir->setPath( $PLUGINCONFDIR );

	$pluginworkdir     ->setPath( $PLUGINWORKDIR );
	$distapluginconfdir->setBasePath( $DISTRIBUTEDAGENTBASEDIR );
	$distmpluginconfdir->setBasePath( $DISTRIBUTEDMASTERBASEDIR );
	$distncrtconfdir   ->setBasePath( $DISTRIBUTEDMASTERBASEDIR );
	$distnaemondefdir  ->setBasePath( $DISTRIBUTEDMASTERBASEDIR );

	$pluginexec->setPluginDirPath      ( $PLUGINDIR );
	$pluginexec->setPluginConfigDirPath( $PLUGINCONFDIR );
	$pluginexec->setPluginWorkDirPath  ( $PLUGINWORKDIR );
	$pluginexec->setDistributedAgentBasePath ( $DISTRIBUTEDAGENTBASEDIR );
	$pluginexec->setDistributedMasterBasePath( $DISTRIBUTEDMASTERBASEDIR );
	$pluginexec->setPlaybookDirPath    ( $PLAYBOOKDIR );
}


######## Step2. ########

if( $plan{Step2} ){
	$ncrtconfdir->load;
	$pluginconfdir->load;

	#$builder->buildSubModules();
}

######## Step3. ########

if( $plan{Step3} ){
	mkdir_or_die $WORKDIR;
	mkdir_or_die $DISTRIBUTEDAGENTBASEDIR;
	mkdir_or_die $DISTRIBUTEDMASTERBASEDIR;
	mkdir_or_die $PLAYBOOKDIR;

	$pluginworkdir->create;
}

######## Step4. ########

my @agentplugins;
my @agentlessplugins;
my @indirectplugins;
if( $plan{Step4} ){
	$pluginexec->load;
	$pluginexec->execAgentTypePlugins;
	$pluginexec->execMasterTypePlugins;
	$pluginexec->execAgentPlugins;
	$pluginexec->execAgentlessPlugins;
	$pluginexec->execIndirectPlugins;
	$pluginexec->execContactPlugins;
	$pluginexec->execReporterPlugins;

	@agentplugins     = $pluginexec->listAgentPlugins;
	@agentlessplugins = $pluginexec->listAgentlessPlugins;
	@indirectplugins  = $pluginexec->listIndirectPlugins;
}

######## Step5. ########

my $workvalid    = NCRTBuild::PluginWorkFileValidator->new;
my $pluginconfvalid = NCRTBuild::PluginConfigValidator->new;

my $thrgen        = NCRTBuild::ThresholdGenerator->new;
my $mfiltergen    = NCRTBuild::Generic::SimpleValueGenerator->new;
my $tfiltergen    = NCRTBuild::Generic::SimpleValueGenerator->new;
my $ndirectivegen = NCRTBuild::Generic::KeyValueGenerator->new;
#my $backendgen    = NCRTBuild::BackendHostServiceGenerator->new;

my $thrdist      = NCRTBuild::ThresholdRuleDistributor->new;
my $ndefdist     = NCRTBuild::NaemonDefinitionDistributor->new;
my $backenddist  = NCRTBuild::BackendHostServiceDistributor->new;
my $filterdist   = NCRTBuild::Generic::FilterRuleDistributor->new;
my $pluginconfdist4agent     = NCRTBuild::PluginConfigDistributor::HostServiceForAgent->new;
my $pluginconfdist4agentless = NCRTBuild::PluginConfigDistributor::HostServiceForAgentless->new;
my $pluginconfdist4indirect  = NCRTBuild::PluginConfigDistributor::HostServiceForIndirect->new;
my $simplepluginconfdist4a   = NCRTBuild::PluginConfigDistributor::Simple->new;
my $simplepluginconfdist4m   = NCRTBuild::PluginConfigDistributor::Simple->new;
if( $plan{Step5} ){
	$workvalid      ->setInputDir( $pluginworkdir );
	$pluginconfvalid->setInputDir( $pluginconfdir );

	$pluginconfvalid->setPluginWorkFileValidator( $workvalid );

	$thrdist        ->setGenerator( $thrgen );
	$filterdist     ->setGenerator( "metricfilter",    "metricfilter",    $mfiltergen );
	$filterdist     ->setGenerator( "thresholdfilter", "thresholdfilter", $tfiltergen );
	#$backenddist    ->setGenerator( $backendgen );

	$ndefdist       ->setOutputDir( $distnaemondefdir );
	$thrdist        ->setOutputDir( $distncrtconfdir );
	$filterdist     ->setOutputDir( $distncrtconfdir );
	$backenddist    ->setOutputDir( $distncrtconfdir );

	$pluginconfdist4agent    ->setOutputDir( $distapluginconfdir );
	$pluginconfdist4agentless->setOutputDir( $distmpluginconfdir );
	$pluginconfdist4indirect ->setOutputDir( $distapluginconfdir );
	$simplepluginconfdist4a  ->setOutputDir( $distapluginconfdir );
	$simplepluginconfdist4m  ->setOutputDir( $distmpluginconfdir );
}

######## Step6. ########

my @mastertype;
my @masterhost;
my @agenttype;
my @measurement;
my @agenthost;
my @pseudohost;
my @host_service;
my @hostgroup;
my @hostservicegroup;
my @user;
my @hostuser;
my @hostserviceuser;
if( $plan{Step6} ){
	$workvalid->load();

	@mastertype       = $workvalid->listMasterTypes;
	@masterhost       = $workvalid->listMasterHosts;
	@agenttype        = $workvalid->listAgentTypes;
	@measurement      = $workvalid->listMeasurements;
	@agenthost        = $workvalid->listAgentHosts;
	@pseudohost       = $workvalid->listPseudoHosts;
	@host_service     = $workvalid->listMonitoredHostServices;
	@hostgroup        = $workvalid->listMonitoredHostGroups;
	@hostservicegroup = $workvalid->listMonitoredHostServiceGroups;
	@user             = $workvalid->listUsers;
	@hostuser         = $workvalid->listMonitoredHostUsers;
	@hostserviceuser  = $workvalid->listMonitoredHostServiceUsers;

	#$pluginworkdir4masters->setMasterHosts( @masterhost );
	#$pluginworkdir4agents ->setAgentHosts ( @agenthost );

	$pluginconfvalid->load();
}

######## Step7. ########

if( $plan{Step7} ){
	$distapluginconfdir->setHosts( @agenthost );
	$distmpluginconfdir->setHosts( @masterhost );
	$distncrtconfdir   ->setHosts( @masterhost );
	$distnaemondefdir  ->setHosts( @masterhost );

	$distapluginconfdir->create;
	$distmpluginconfdir->create;
	$distncrtconfdir   ->create;
	$distnaemondefdir  ->create;

	my @rules = $ncrtconfdir->loadNaemonDirectiveRules;
	$ndirectivegen->setValueName( "naemondirective" );
	$ndirectivegen->setRules( @rules );
	$ndirectivegen->prepare;

	my @rules = $ncrtconfdir->loadThresholdRules;
	$thrgen->setRules( @rules );
	$thrgen->prepare;

	my @rules = $ncrtconfdir->loadMetricFilterRules;
	$mfiltergen->setValueName( "filter" );
	$mfiltergen->setRules( @rules );
	$mfiltergen->prepare;

	my @rules = $ncrtconfdir->loadThresholdFilterRules;
	$tfiltergen->setValueName( "filter" );
	$tfiltergen->setRules( @rules );
	$tfiltergen->prepare;

	#my @rules = $ncrtconfdir->loadPseudoHost2Service2BackendHost;
	#$backendgen->setRules( @rules );
	#$backendgen->prepare;
}

######## Step8. ########

if( $plan{Step8} ){
	my %generator_and_distributor = (
		"default" => sub {
			my $generator = NCRTBuild::PluginConfigGenerator::HostService->new;
			return $generator, $pluginconfdist4agent;
		},
		"simple"  => sub {
			my $generator = NCRTBuild::PluginConfigGenerator::Simple->new;
			return $generator, $simplepluginconfdist4a;
		},
	);
	foreach my $measurement ( @agentplugins ){
		my @pluginconffile = $pluginconfvalid->loadPluginConfigFileOf( 'agent', $measurement );
		foreach my $pluginconffile ( @pluginconffile ){
			my $format     = $$pluginconffile{format};
			my $pluginconf = $$pluginconffile{pluginconf};
			my $content    = $$pluginconffile{content};
			my ($generator, $dist) = &{ $generator_and_distributor{$format} };
			$generator->setOriginConfig( @$content );
			$dist->addGenerator( 'agent', $measurement, $pluginconf, $generator );
		}
	}
}

######## Step9. ########

if( $plan{Step9} ){
	my %generator_and_distributor = (
		"default" => sub {
			my $generator = NCRTBuild::PluginConfigGenerator::HostService->new;
			return $generator, $pluginconfdist4indirect;
		},
		"simple"  => sub {
			my $generator = NCRTBuild::PluginConfigGenerator::Simple->new;
			return $generator, $simplepluginconfdist4a;
		},
	);
	foreach my $measurement ( @indirectplugins ){
		my @pluginconffile = $pluginconfvalid->loadPluginConfigFileOf( 'indirect', $measurement );
		foreach my $pluginconffile ( @pluginconffile ){
			my $format     = $$pluginconffile{format};
			my $pluginconf = $$pluginconffile{pluginconf};
			my $content    = $$pluginconffile{content};
			my ($generator, $dist) = &{ $generator_and_distributor{$format} };
			$generator->setOriginConfig( @$content );
			$dist->addGenerator( 'indirect', $measurement, $pluginconf, $generator );
		}
	}
}

######## Step10. ########

if( $plan{Step11} ){
	my %generator_and_distributor = (
		"default" => sub {
			my $generator = NCRTBuild::PluginConfigGenerator::HostService->new;
			return $generator, $pluginconfdist4agentless;
		},
		"simple"  => sub {
			my $generator = NCRTBuild::PluginConfigGenerator::Simple->new;
			return $generator, $simplepluginconfdist4m;
		},
	);
	foreach my $measurement ( @agentlessplugins ){
		my @pluginconffile = $pluginconfvalid->loadPluginConfigFileOf( 'agentless', $measurement );
		foreach my $pluginconffile ( @pluginconffile ){
			my $format     = $$pluginconffile{format};
			my $pluginconf = $$pluginconffile{pluginconf};
			my $content    = $$pluginconffile{content};
			my ($generator, $dist) = &{ $generator_and_distributor{$format} };
			$generator->setOriginConfig( @$content );
			$dist->addGenerator( 'agentless', $measurement, $pluginconf, $generator );
		}
	}
}


######## Step12. ########

if( $plan{Step12} ){
	$ndefdist->setMasterHosts               ( @masterhost );
	$ndefdist->setAgentTypes                ( @agenttype );
	$ndefdist->setMeasurements              ( @measurement );
	$ndefdist->setAgentHosts                ( @agenthost );
	$ndefdist->setPseudoHosts               ( @pseudohost );
	$ndefdist->setMonitoredHostServices     ( @host_service );
	$ndefdist->setMonitoredHostGroups       ( @hostgroup );
	$ndefdist->setMonitoredHostServiceGroups( @hostservicegroup );
	$ndefdist->setUsers                     ( @user );
	$ndefdist->setMonitoredHostUsers        ( @hostuser );
	$ndefdist->setMonitoredHostServiceUsers ( @hostserviceuser );

	my $action_url = $ncrtconfdir->getHELPERURL;
	$ndefdist->setActionURL( $action_url );
	$ndefdist->setNaemonDirectiveGenerator  ( $ndirectivegen );
	$ndefdist->run;

	$backenddist->setMonitoredHostServices  ( @host_service );
	$backenddist->run;
}


######## Step13. ########

if( $plan{Step13} ){
	$pluginconfdist4agent    ->setMonitoredHostServices( @host_service );
	$pluginconfdist4agent    ->run;
	$pluginconfdist4agentless->setMonitoredHostServices( @host_service );
	$pluginconfdist4agentless->run;
	$pluginconfdist4indirect ->setMonitoredHostServices( @host_service );
	$pluginconfdist4indirect ->run;
	$simplepluginconfdist4a  ->setHosts( @agenthost );
	$simplepluginconfdist4a  ->run;
	$simplepluginconfdist4m  ->setHosts( @masterhost );
	$simplepluginconfdist4m  ->run;
}



######## Step14. ########

my $resourcedist = NCRTBuild::ResourceDistributor->new;
if( $plan{Step14} ){
	$resourcedist->setPluginDirPath               ( $PLUGINDIR );
	$resourcedist->setFilterDirPath               ( $FILTERDIR );
	$resourcedist->setDistributedDirPathForAgents ( $DISTRIBUTEDAGENTBASEDIR );
	$resourcedist->setDistributedDirPathForMasters( $DISTRIBUTEDMASTERBASEDIR );
	$resourcedist->setAgentHosts                  ( @agenthost );
	$resourcedist->setMasterHosts                 ( @masterhost );
	$resourcedist->run;
}

######## Step19. ########

if( $plan{Step19} ){
	my $playbookexec = NCRTBuild::PlaybookExecuter->new;
	$playbookexec->setPlaybookDirPath    ( $PLAYBOOKDIR );
	$playbookexec->setPluginDirPath      ( $PLUGINDIR );
	$playbookexec->setPluginConfigDirPath( $PLUGINCONFDIR );
	$playbookexec->setPluginWorkDirPath  ( $PLUGINWORKDIR );
	$playbookexec->setDistributedDirPath ( $DISTRIBUTEDMASTERBASEDIR );
	$playbookexec->setBaseName( "build_ncrtmasters" );
	$playbookexec->setHosts( @masterhost );
	$playbookexec->setTargetPattern( $target_master );
	$playbookexec->setQuick if $quick;
	$playbookexec->setDryRun if $dryrun;
	my $ansibleoptions = $ncrtconfdir->getANSIBLEOPTIONS;
	$playbookexec->setAnsibleOptions( $ansibleoptions );
	$playbookexec->deploy;
}

######## Step20. ########

if( $plan{Step20} ){
	my $playbookexec = NCRTBuild::PlaybookExecuter->new;
	$playbookexec->setPlaybookDirPath    ( $PLAYBOOKDIR );
	$playbookexec->setPluginDirPath      ( $PLUGINDIR );
	$playbookexec->setPluginConfigDirPath( $PLUGINCONFDIR );
	$playbookexec->setPluginWorkDirPath  ( $PLUGINWORKDIR );
	$playbookexec->setDistributedDirPath ( $DISTRIBUTEDAGENTBASEDIR );
	$playbookexec->setBaseName( "build_ncrtagents" );
	$playbookexec->setHosts( @agenthost );
	$playbookexec->setTargetPattern( $target_agent );
	$playbookexec->setQuick if $quick;
	$playbookexec->setDryRun if $dryrun;
	my $ansibleoptions = $ncrtconfdir->getANSIBLEOPTIONS;
	$playbookexec->setAnsibleOptions( $ansibleoptions );
	$playbookexec->deploy;
}

######## Step21. ########
END {
	if( $plan{Step21} ){
		rm_r $WORKDIR if -d $WORKDIR;
	}
}


