#!/usr/bin/perl

use strict;

our $TOOLHOME;
BEGIN {
	$0 =~ m"^(.*)/";
	$TOOLHOME = "$1/..";
	while( $TOOLHOME =~ s{(^|/)[^\.][^/]*/\.\.(/|$)}{$1} ){}
}
use lib "$TOOLHOME/lib/perl5";
use NCRTCommon;
use NCRTStackMachine;
use NCRTTimeSeries;

our $BINDIR = "$TOOLHOME/bin";
our $PLUGINSDIR = "$TOOLHOME/plugins";
our $FILTERSDIR = "$TOOLHOME/filters";
our $CONFDIR = "$TOOLHOME/conf";

if( @ARGV < 3 ){
	print "usage: % $0 MEASURE HOST SERVICE\n";
	exit 3;
}

my $measure   = $ARGV[0];
my $host      = $ARGV[1];
my $service   = $ARGV[2];

# setup work directory
our $WORKDIR;
if( $ENV{'HOME'} ){ $WORKDIR = $ENV{'HOME'} . "/.ncrt"; }
else{
	my ($name, $passwd, $uid, $gid, $quota, $comment, $gcos, $home, $shell, $expire ) = getpwuid $<;
	$WORKDIR = "$home/.ncrt";
}
unless( -d $WORKDIR ){ mkdir $WORKDIR or die "$WORKDIR: cannot create, stopped"; }

our @OUTPUTS;
our $PLUGIN_HAS_FAILED;

#### 1. measure plugin generates metrics.
#### 2. metrics pass through some filters if required.
#### 3. metrics are evaluated if contain expressions.
#### 4. threshold setting generates thresholds.
#### 5. thresholds pass through some filters if required.
#### 6. thresholds are evaluated if contain expressions.
#### 7. warnings / criticals are detected from metrics and thresholds.

my $hosts = load_hosts;
my $proxyhosts = load_proxyhosts $measure, $host, $service;

# 1. measure plugin generates metrics.
my %m1 = generate_metrics_from_proxyagents $measure, $host, $service, $hosts, $proxyhosts;

# 2. metrics pass through some filters if required.
my %m2 = pass_through_filters $measure, $host, $service, "metricfilter", %m1;

# 3. metrics are evaluated if include expression.
my %m3 = evaluate_values $measure, $host, $service, %m2;

# 4. threshold setting generates thresholds.
my %t1 = generate_thresholds $measure, $host, $service, %m3;

# 5. thresholds pass through some filters if required.
my %t2 = pass_through_filters $measure, $host, $service, "thresholdfilter", %t1;

# 6. thresholds are evaluated if contain expressions.
my %t3 = evaluate_values $measure, $host, $service, %t2;

# 7. warnings / criticals is detected from metrics and thresholds.
my ($statuscode, $output, $perfdata) = generate_detection_results $measure, $host, $service, %t3;

print "$output | $perfdata\n";
exit $statuscode;


