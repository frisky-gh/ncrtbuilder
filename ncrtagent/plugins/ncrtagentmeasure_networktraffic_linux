#!/usr/bin/perl

use strict;

our $HISTORY_EXPIRYTERM_H = 2;

if( @ARGV < 2 ){
	print "usage: % $0 CONFDIR WORKDIR\n";
	exit 1;
}

our $CONFDIR = $ARGV[0];
our $WORKDIR = $ARGV[1];

####
sub n ($) {
	return sprintf "%.2f", $_[0];
}

sub nc ($) {
	return sprintf "%d", $_[0];
}

sub var2ltsv ( \% ){
	my ($var) = @_;
	my @ltsv;
	push @ltsv, "timestamp:".$var->{timestamp} if defined $var->{timestamp};
	foreach my $k ( sort {$a cmp $b} keys %$var ){
		next if $k eq 'timestamp';
		push @ltsv, "$k:".$var->{$k};
	}
	return join "\t", @ltsv;
}

sub ltsv2var ( $ ){
	my ($ltsv) = @_;
	my %var;
	foreach my $kv ( split m"\t", $ltsv ){
		$kv =~ m"^([-./\[\]\w]+):(.*)$" or do {
			next;
		};
		my $k = $1;
		my $v = $2;
		$var{$k} = $v;
	}
	return %var;
}

sub calc_delta ($$\%) {
	my ($f, $longterm_h, $curr) = @_;
	my @history;

	my $now = time;
	my $longterm_limit  = $now - $longterm_h * 60 * 60;
	my $shortterm_limit = $now - 59;

	# load history
	if( open my $h, '<', $f ){
		while( <$h> ){
			chomp;
			my %v = ltsv2var $_;
			push @history, \%v;
		}
		close $h;
	}

	# search origin
	my $shortterm_origin;
	foreach my $e ( @history ){
		last	if $e->{timestamp} > $shortterm_limit;
		$shortterm_origin = $e;
	}
	my $longterm_origin;
	foreach my $e ( @history ){
		last	if $e->{timestamp} > $shortterm_limit;
		last	if $e->{timestamp} > $longterm_limit and
			defined $longterm_origin;
		$longterm_origin = $e;
	}

	# store history
	open my $h, '>', "$f.$$" or do {
		die "$f.$$: cannot open, stopped";
	};
	push @history, { 'timestamp' => $now,  %$curr };
	foreach my $e ( @history ){
		next if $e->{timestamp} < $longterm_limit;
		print $h var2ltsv( %$e ), "\n";
	}
	close $h;
	unlink $f;
	rename "$f.$$", $f;

	# calc difference
	my %shortterm_delta;
	if( $shortterm_origin ){
		my $deltat = $now - $shortterm_origin->{timestamp};
		while( my ($k, $v) = each %$curr ){
			my $v2 = $shortterm_origin->{$k} // next;
			$shortterm_delta{$k} = ($v - $v2) / $deltat;
		}
	}
	my %longterm_delta;
	if( $longterm_origin ){
		my $deltat = $now - $longterm_origin->{timestamp};
		while( my ($k, $v) = each %$curr ){
			my $v2 = $longterm_origin->{$k} // next;
			$longterm_delta{$k} = ($v - $v2) / $deltat;
		}
	}

	return \%shortterm_delta, \%longterm_delta;
}

#### load detector conf. for agents
my @ignore_rules;
my $f = "$CONFDIR/agent/networktraffic.ignores";
open my $h, '<', $f or do {
	die "$f: cannot open, stopped";
};
while( <$h> ){
	chomp;
	next if m"^\s*(#|$)";
	die "$f:$.:$_: illegal format, stopped" unless m"^!(\S+)$";
	push @ignore_rules, qr"^$2$";
}
close $h;

####
# data
my %d;
my %lastd;
my @history;

# load curr data
open my $h, '-|', "ip -s link" or do {
	die "ip: cannot execute, stopped";
};
my $ifname;
my $mode;
while( <$h> ){
	chomp;
	next unless m"^(?:
		(\d+:\s+(?: (\w+) | \w+\@(if\d+) ):\s+<[^>]*>((?:\s+\S+\s+\S+)*)) |
		(\s+RX:) |
		(\s+TX:) |
		(\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+))
	).*$"x;
	# new link
	if    ( $1 ne '' ){
		$ifname = $2 || $3;
		foreach my $r ( @ignore_rules ){
			next unless $ifname =~ $r;
			$ifname = undef;
			last;
		}
	# rx
	}elsif( $5 ne '' ){
		$mode = 'rx';
	# tx
	}elsif( $6 ne '' ){
		$mode = 'tx';
	# statistics
	}elsif( $7 ne '' && $mode eq 'rx' ){
		next unless defined $ifname;
		$d{"link[$ifname]-rx-bytes-cnt"}   = $8;
		$d{"link[$ifname]-rx-packets-cnt"} = $9;
		$d{"link[$ifname]-rx-errors-cnt"}  = $10;
		$d{"link[$ifname]-rx-dropped-cnt"} = $11;
		$d{"link[$ifname]-rx-overrun-cnt"} = $12;
		$d{"link[$ifname]-rx-mcast-cnt"}   = $13;
	# statistics
	}elsif( $7 ne '' && $mode eq 'tx' ){
		next unless defined $ifname;
		$d{"link[$ifname]-tx-bytes-cnt"}   = $8;
		$d{"link[$ifname]-tx-packets-cnt"} = $9;
		$d{"link[$ifname]-tx-errors-cnt"}  = $10;
		$d{"link[$ifname]-tx-dropped-cnt"} = $11;
		$d{"link[$ifname]-tx-carrier-cnt"} = $12;
		$d{"link[$ifname]-tx-collsns-cnt"} = $13;
	}
}
close $h;

my $longterm = sprintf "%dH", $HISTORY_EXPIRYTERM_H;

my ($shortd, $longd) = calc_delta "$WORKDIR/networktraffic.history", $HISTORY_EXPIRYTERM_H, %d;
foreach my $k ( keys %$shortd ){
	my $shortv = $shortd->{$k};
	my $longv = $longd->{$k};
	die unless $k =~ m"-(\w+)-cnt$";
	if( $1 eq 'bytes' ){
		$d{"$`-throughput-mbps"} = n $shortv / 1000000 * 8;
		$d{"longtermavg-of-$`-throughput-mbps"} = n $longv / 1000000 * 8;
	}else{
		$d{"$`-$1-ppm"} = n $shortv * 60;
		$d{"longtermavg-of-$`-$1-ppm"} = n $longv * 60;
	}
}

# output
foreach my $k ( sort keys %d ){
	my $v = $d{$k};
	print "$k=$v\n";
}

exit 0;


