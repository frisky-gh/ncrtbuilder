#!/usr/bin/perl

use strict;

our $HISTORY_EXPIRYTERM_H = 1;

if( @ARGV < 2 ){
	print "usage: % $0 CONFDIR WORKDIR\n";
	exit 1;
}

our $CONFDIR = $ARGV[0];
our $WORKDIR = $ARGV[1];

####
sub n ($) {
	return sprintf "%.2f", $_[0];
}
sub nP ($) {
	return sprintf "%.2f%%", $_[0];
}
sub nMB ($) {
	return sprintf "%.2fMB", $_[0];
}

sub var2ltsv ( \% ){
	my ($var) = @_;
	my @ltsv;
	push @ltsv, "timestamp:".$var->{timestamp} if defined $var->{timestamp};
	foreach my $k ( sort {$a cmp $b} keys %$var ){
		next if $k eq 'timestamp';
		push @ltsv, "$k:".$var->{$k};
	}
	return join "\t", @ltsv;
}

sub ltsv2var ( $ ){
	my ($ltsv) = @_;
	my %var;
	foreach my $kv ( split m"\t", $ltsv ){
		$kv =~ m"^([-./\[\]\w]+):(.*)$" or do {
			next;
		};
		my $k = $1;
		my $v = $2;
		$var{$k} = $v;
	}
	return %var;
}

sub calc_delta ($$\%) {
	my ($f, $longterm_h, $curr) = @_;
	my @history;

	my $now = time;
	my $longterm_limit  = $now - $longterm_h * 60 * 60;
	my $shortterm_limit = $now - 59;

	# load history
	if( open my $h, '<', $f ){
		while( <$h> ){
			chomp;
			my %v = ltsv2var $_;
			push @history, \%v;
		}
		close $h;
	}

	# search origin
	my $shortterm_origin;
	foreach my $e ( @history ){
		last	if $e->{timestamp} > $shortterm_limit;
		$shortterm_origin = $e;
	}
	my $longterm_origin;
	foreach my $e ( @history ){
		last	if $e->{timestamp} > $shortterm_limit;
		last	if $e->{timestamp} > $longterm_limit and
			defined $longterm_origin;
		$longterm_origin = $e;
	}

	# store history
	open my $h, '>', "$f.$$" or do {
		die "$f.$$: cannot open, stopped";
	};
	push @history, { 'timestamp' => $now,  %$curr };
	foreach my $e ( @history ){
		next if $e->{timestamp} < $longterm_limit;
		print $h var2ltsv( %$e ), "\n";
	}
	close $h;
	unlink $f;
	rename "$f.$$", $f;

	# calc difference
	my %shortterm_delta;
	if( $shortterm_origin ){
		my $deltat = $now - $shortterm_origin->{timestamp};
		while( my ($k, $v) = each %$curr ){
			my $v2 = $shortterm_origin->{$k} // next;
			$shortterm_delta{$k} = ($v - $v2) / $deltat;
		}
	}
	my %longterm_delta;
	if( $longterm_origin ){
		my $deltat = $now - $longterm_origin->{timestamp};
		while( my ($k, $v) = each %$curr ){
			my $v2 = $longterm_origin->{$k} // next;
			$longterm_delta{$k} = ($v - $v2) / $deltat;
		}
	}

	return \%shortterm_delta, \%longterm_delta;
}

####

# metrics
my %m;
# thresholds
my @wt;
my @ct;
#
my @w;
my @c;

# load curr cpu jiffies
my %curr;
my $f = '/proc/stat';
open my $h, '<', $f or do {
	die "$f: cannot open, stopped";
};
while( <$h> ){
	chomp;
	next unless m"^cpu\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)";
	$curr{user} = $1;
	my $nice = $2;
	$curr{system} = $3;
	$curr{idle} = $4;
	$curr{iowait} = $5;
	my $irq = $6;
	my $softirq = $7;
	$curr{other} = $nice + $irq + $softirq;
}
close $h;

my $longterm = sprintf "%dH", $HISTORY_EXPIRYTERM_H;
my ($shortd, $longd) = calc_delta "$WORKDIR/osperf_cpu.history", $HISTORY_EXPIRYTERM_H, %curr;
my $shortterm_jiffies = $shortd->{user} + $shortd->{system} + $shortd->{iowait} + $shortd->{idle};
my $longterm_jiffies  = $longd->{user} + $longd->{system} + $longd->{iowait} + $longd->{idle};
foreach my $i ( 'user', 'system', 'iowait', 'idle' ){
	$m{"cpu-${i}-pct"} = nP 100 * $shortd->{$i} / $shortterm_jiffies
		if $shortterm_jiffies > 0;
	$m{"cpu-${i}-longtermavg[$longterm]-pct"} = nP 100 * $longd->{$i} / $longterm_jiffies
		if $longterm_jiffies > 0;
}

# memory/swap
my $f = '/proc/meminfo';
open my $h, '<', $f or do {
	die "$f: cannot open, stopped";
};
while( <$h> ){
	chomp;
	next unless m"^(MemTotal|MemAvailable|MemFree|Buffers|Cached|SwapCached|SReclaimable|Shmem|SwapTotal|SwapFree):\s+(\d+) kB";
	if   ( $1 eq 'MemTotal'     ){ $m{'mem-total'}        = nMB $2 / 1024; }
	elsif( $1 eq 'MemAvalablel' ){ $m{'mem-available'}    = nMB $2 / 1024; }
	elsif( $1 eq 'MemFree'      ){ $m{'mem-free'}         = nMB $2 / 1024; }
	elsif( $1 eq 'Buffers'      ){ $m{'mem-buffers'}      = nMB $2 / 1024; }
	elsif( $1 eq 'Cached'       ){ $m{'mem-cached'}       = nMB $2 / 1024; }
	elsif( $1 eq 'SwapCached'   ){ $m{'mem-swapcached'}   = nMB $2 / 1024; }
	elsif( $1 eq 'SReclaimable' ){ $m{'mem-sreclaimable'} = nMB $2 / 1024; }
	elsif( $1 eq 'Shmem'        ){ $m{'mem-shmem'}        = nMB $2 / 1024; }
	elsif( $1 eq 'SwapTotal'    ){ $m{'swap-total'}       = nMB $2 / 1024; }
	elsif( $1 eq 'SwapFree'     ){ $m{'swap-free'}        = nMB $2 / 1024; }
}
close $h;
unless( defined $m{'mem-available'} ){
	$m{'mem-available'} = nMB $m{'mem-buffers'} + $m{'mem-cached'} + $m{'mem-free'} + $m{'mem-sreclaimable'} - $m{'mem-shmem'};
}
$m{'mem-available-pct'} = nP 100 * $m{'mem-available'} / $m{'mem-total'};
$m{'swap-free-pct'} = nP 100 * $m{'swap-free'} / $m{'swap-total'};

# proc/thread
opendir my $d, '/proc' or do {
	die "/proc: cannot open, stopped";
};
my $procs;
my $threads;
while( my $e = readdir $d ){
	next unless $e =~ m"^\d+$";
	$procs++;
	opendir my $d2, "/proc/$e/task" or next;
	while( my $e2 = readdir $d2 ){
		next unless $e2 =~ m"^\d+$";
		$threads++;
	}
	closedir $d2;
}
closedir $d;
$m{'procs'} = $procs;
$m{'threads'} = $threads;

# loadavg
open my $h, '<', '/proc/loadavg' or do {
	die "/proc/loadavg: cannot open, stopped";
};
my $loadavg;
while( <$h> ){
	chomp;
	next unless m"^(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)";
	$loadavg = $1;
}
close $h;
$m{'loadavg'} = n $loadavg;

#
foreach my $k ( sort keys %m ){
	my $v = $m{$k};
	print "$k=$v\n";
}

exit 0;


