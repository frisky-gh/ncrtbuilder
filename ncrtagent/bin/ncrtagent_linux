#!/usr/bin/perl

our ($TOOLHOME, $PLUGINSDIR, $CONFDIR);
BEGIN {
	$0 =~ m"^(.*)/";
	$TOOLHOME = "$1/..";
	while( $TOOLHOME =~ s{(^|/)[^\./][^/]*/\.\.(/|$)}{} ){}
	$TOOLHOME =~ s{/$}{};
	$PLUGINSDIR = "$TOOLHOME/plugins";
	$CONFDIR = "$TOOLHOME/conf";
}
use lib "$TOOLHOME/lib/perl5";

use English;
use Socket;
use IO::Handle;
use URI::Escape;
use HTTP::Daemon;
use HTTP::Status;
use LWP::UserAgent;
use IPC::Open2;
use Template;
use strict;

our $NAME = 'ncrtagent_linux';
our $LOGFILE  = '/var/log/naemon/ncrtagent.log';
our $WORKDIR;

####
our $LOGFH = *STDERR;
our $DEBUG = 0;

sub debuglog ($;@) {
	return unless $DEBUG;
	my ($format, @args) = @_;
	my ($sec,$min,$hour,$day,$mon,$year) = localtime time;
	my $t = sprintf '%04d-%02d-%02d_%02d:%02d:%02d', $year+1900, $mon+1, $day, $hour, $min, $sec;
	printf $LOGFH "$t $format\n", @args;
}

sub accesslog ($;@) {
	my ($format, @args) = @_;
	my ($sec,$min,$hour,$day,$mon,$year) = localtime time;
	my $t = sprintf '%04d-%02d-%02d_%02d:%02d:%02d', $year+1900, $mon+1, $day, $hour, $min, $sec;
	printf $LOGFH "$t $format\n", @args;
}

sub var2ltsv ( \% ){
	my ($var) = @_;
	my @ltsv;
	push @ltsv, "host_service:".$var->{host_service} if defined $var->{host_service};
	foreach my $k ( sort {$a cmp $b} keys %$var ){
		next if $k eq 'host_service';
                push @ltsv, "$k:".$var->{$k};
	}
	return join "\t", @ltsv;
}

sub ltsv2var ( $ ){
	my ($ltsv) = @_;
	my %var;
	foreach my $kv ( split m"\t", $ltsv ){
		$kv =~ m"^([^[:cntrl:]\s:;=]+)[:=](.*)$" or do {
			next;
		};
		my $k = $1;
		my $v = $2;
		$var{$k} = $v;
	}
	return %var;
}

####
sub compile_allow ($) {
	my ($allow) = @_;
	my @allow;
	foreach my $subnet ( split m",", $allow ){
		if( $subnet =~ m"^(\d+\.\d+\.\d+\.\d+)/(\d+)$" ){
			my $addr = $1;
			my $netbit = $2;
			my $bin_netmask = inet_aton '255.255.255.255';
			for( my $i = $netbit; $i < 32; ++$i ){ 
				vec($bin_netmask, $i, 1) = 0;
			}
			my $bin_addr = inet_aton $addr;
			my $bin_subnet = $bin_addr & $bin_netmask;
			push @allow, [$bin_subnet, $bin_netmask];
		}elsif( $subnet =~ m"^(\d+\.\d+\.\d+\.\d+)$" ){
			my $bin_netmask = inet_aton '255.255.255.255';
			my $bin_addr = inet_aton $subnet;
			push @allow, [$bin_addr, $bin_netmask];
		}
	}
	return @allow;
}

sub check_allow ($@) {
	my ($bin_addr, @allow) = @_;
	foreach my $subnet_netmask ( @allow ){
		if( $$subnet_netmask[0] eq ($bin_addr & $$subnet_netmask[1]) ){
			return 1;
		}
	}
	return undef;
}

sub setup_workdir () {
	if( $ENV{'HOME'} ){ $WORKDIR = $ENV{'HOME'} . "/.ncrt"; }
	else{
        	my ($name, $pw, $uid, $gid, $quota, $comment, $gcos,
		    $home, $shell, $expire ) = getpwuid $<;
        	$WORKDIR = "$home/.ncrt";
	}
	unless( -d $WORKDIR ){
		mkdir $WORKDIR or die "$WORKDIR: cannot create, stopped";
 	}
}

sub read_conf () {
	my %conf = (
		'listen_address' => '0.0.0.0',
		'listen_port' => 46848,
		'daemon_user' => undef,
		'DEBUG' => 0,
	);

	my $conffile = "$CONFDIR/ncrtagent_linux.conf";
	open my $h, '<', $conffile or do {
		die "cannot open $conffile: $OS_ERROR, stopped";
	};
	while (<$h>) {
		next if m"^\s*(#|$)";
		die "$conffile:$.: illegal format, stopped" unless m"^(\w+)=(.*)$";
		$conf{$1} = $2;
	}
	close $h or do {
		die "close failed for $conffile: $OS_ERROR, stopped";
	};
	return \%conf;
}

sub read_command ($) {
	my ($cmd) = @_;

	#my $out, my $in;
	my $pid = open2 my $out, my $in, $cmd;
	close $in;

	my @messages;
	my %metrics;
	while( <$out> ){
		chomp;
		next if m"^\s*(#|$)";
		die "$_, stopped" unless m"^([^[:cntrl:]\s:;=]+)=(.*)$";
		my $k = $1;
		my $v = $2;
		if( $k eq 'message' ){ push @messages, $v; }
		elsif( $v =~ m"^([-+]?\d+(?:\.\d+)?)([%a-zA-Z]*)$" ){
			$metrics{$k} = $v;
		}
	}
	close $out;

	waitpid $pid, 0;
	my $plugin_rc = $? >> 8;
	my $ok = 1;
	if( $plugin_rc > 0 ){
		push @messages, "plugin_rc:$plugin_rc";
		$ok = undef;
	}
	return $ok, \%metrics, \@messages;
}

sub write_pidfile ($) {
	my ($pid) = @_;
	my $f = "$WORKDIR/ncrtagent_linux.pid";
	open my $h, '>', $f or die;
	print $h "$pid\n";
	close $h;
}

sub read_pidfile () {
	my $f = "$WORKDIR/ncrtagent_linux.pid";
	open my $h, '<', $f or return undef;
	my $pid = <$h>;
	close $h;
	return undef unless kill 0, $pid;
	return $pid;
}

####
sub action_measure ($$$$$) {
	my ($conf, $conn, $measure, $host, $service) = @_;
	my $cmd = "$PLUGINSDIR/ncrtagent_${measure}_linux $CONFDIR $WORKDIR $measure $host $service";
	my ($ok, $metrics, $messages) = read_command $cmd;

	my $content;
	foreach my $k ( sort keys %$metrics ){
		my $v = $$metrics{$k};
		$content .= "$k=$v\n";
	}
	foreach my $v ( @$messages ){
		$content .= "message=$v\n";
	}

	my $res = HTTP::Response->new;
	if( $ok ){ $res->code(200); }
	else     { $res->code(500); }
	$res->header('Content-Type' => 'text/plain');
	$res->content($content);
	$conn->send_response($res);
}

sub action_ping ($$) {
	my ($conf, $conn) = @_;
	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/plain');
	$res->content("OK\n");
	$conn->send_response($res);
}


####
sub cmd_cron ($) {
	my ($conf) = @_;
}

sub cmd_daemon ($) {
	my ($conf) = @_;

	my $daemon_user = $$conf{daemon_user};
	if( $daemon_user ne '' ){
		my ($name, $pw, $uid, $gid, $quota, $comment, $gcos,
		    $home, $shell) = getpwnam $daemon_user;
		unless( defined $uid and defined $gid ){
			die "setuid: $daemon_user: not found, stopped";
		}
		
		$( = $gid unless $( == $gid;
		$) = $gid unless $) == $gid;
		$< = $uid unless $< == $uid;
		$> = $uid unless $> == $uid;
		$ENV{HOME} = $home;
	}
	setup_workdir;
	$LOGFILE  = "$WORKDIR/ncrtagent_linux.log";
	if( open $LOGFH, '>>', $LOGFILE ){ $LOGFH->autoflush; }

	my @allow = compile_allow( $$conf{allow} // "0.0.0.0/0" );

	my $pid = fork;
	if( $pid != 0 ){
		write_pidfile $pid;
		return;
	}

	$0 = $NAME;
	my $d = HTTP::Daemon->new(
		'ReuseAddr' => 1,
		'LocalAddr' => $$conf{listen_address},
		'LocalPort' => $$conf{listen_port}
	) or do {
		die sprintf 'cannot listen %s:%d: %s, stopped',
			$$conf{listen_address}, $$conf{listen_port}, $OS_ERROR;
	};

	$SIG{'TERM'} = sub {
		#$d->shutdown;
		$d->close;
	};
	$SIG{'HUP'} = sub {
		if( open $LOGFH, '>>', $LOGFILE ){ $LOGFH->autoflush; }
		else{ $LOGFH = *STDERR; }
	};
	$SIG{'CHLD'} = 'IGNORE';

	while (my ($conn, $peer_addr) = $d->accept) {
		my $req = $conn->get_request;
		next unless $req;
		my $method = $req->method;
		my $path = uri_unescape $req->uri->path;
		my ($port, $bin_addr) = unpack_sockaddr_in $peer_addr;
		my $addr = inet_ntoa $bin_addr;
		accesslog 'req: client=%s:%d method=%s path=%s',
			$addr, $port, $method, $path;

		unless( check_allow $bin_addr, @allow ){
			accesslog 'error: denied.';
			$conn->send_error(RC_FORBIDDEN);
			$conn->close;
			undef $conn;
			next;
		}

		if( $path =~ m"^/measure/([-\w]+)/([-\w]+)/([-\w]+)" ){
			my $measure = $1;
			my $host = $2;
			my $service = $3;
			my $pid = fork;
			if( $pid == 0 ){
				$d->close;
				$SIG{'CHLD'} = 'DEFAULT';
				action_measure $conf, $conn,
					$measure, $host, $service;
				exit 0;
			}
		}elsif( $path =~ m"^/ping" ){
			action_ping $conf, $conn;
		}else{
			$conn->send_error(RC_FORBIDDEN);
		}
		$conn->close;
		undef $conn;
	}
}

sub cmd_alive ($) {
	my ($conf) = @_;
	my $pid = read_pidfile;
	exit 1 unless defined $pid;
}

sub cmd_kill ($) {
	my ($conf) = @_;
	my $pid = read_pidfile;
	exit 1 unless defined $pid;
	kill 'TERM', $pid;
	for( my $i = 0; $i < 8; ++$i ){
		sleep (1 << $i) * 0.05;
		kill 0, $pid or exit 0;
	}
	exit 1;
}

sub cmd_hup ($) {
	my ($conf) = @_;
	my $pid = read_pidfile;
	exit 1 unless defined $pid;
	kill 'HUP', $pid;
}


####
my $conf = read_conf;
$DEBUG = $conf->{DEBUG};


####
if    ( $ARGV[0] eq "daemon" ){
	cmd_daemon $conf;
	exit 0;
}elsif( $ARGV[0] eq "alive" ){
	cmd_alive $conf;
	exit 0;
}elsif( $ARGV[0] eq "kill" ){
	cmd_kill $conf;
	exit 0;
}elsif( $ARGV[0] eq "hup" ){
	cmd_hup $conf;
	exit 0;
}elsif( $ARGV[0] eq "cron" ){
	setup_workdir;
	cmd_cron $conf;
	exit 0;
}else{
	print "usage: % $0 {daemon|cron}\n";
	exit 0;
}



