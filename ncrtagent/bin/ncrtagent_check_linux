#!/usr/bin/perl

use strict;

$0 =~ m"^(.*)/";
our $TOOLHOME = "$1/..";
while( $TOOLHOME =~ s{(^|/)[^\.][^/]*/\.\.(/|$)}{$1} ){}
our $PLUGINSDIR = "$TOOLHOME/plugins";
our $CONFDIR = "$TOOLHOME/conf";

if( @ARGV < 1 ){
	print "usage: % $0 SERVICE_NAME [INDEX]\n";
	exit 3;
}
my $service = $ARGV[0];
my $index = $ARGV[1];

# setup work directory
our $WORKDIR;
if( $ENV{'HOME'} ){ $WORKDIR = $ENV{'HOME'} . "/.ncrt"; }
else{
	my ($name, $passwd, $uid, $gid, $quota, $comment, $gcos, $home, $shell, $expire ) = getpwuid $<;
	$WORKDIR = "$home/.ncrt";
}
unless( -d $WORKDIR ){ mkdir $WORKDIR or die; }

# metrics
my %m;
#
my @w;
my @c;

# read from service's output
if( open my $e, '-|', "$PLUGINSDIR/ncrtagentservice_${service}_linux $CONFDIR $WORKDIR $index" ){
	while( <$e> ){
		chomp;
		next if m"^\s*(#|$)";
		die "$_, stopped" unless m"^([-\w/\[\]]+)=(\S+)$";
		my $k = $1;
		my $v = $2;
		$m{$k} = $v;
	}
	close $e;
}else{
	print "UNKNOWN $PLUGINSDIR/ncrtagentservice_${service}_linux: not found.\n";
	exit 3;
}

# thresholds
my @wt;
my @ct;
# load thresholds
if( open my $f, '<', "$CONFDIR/service/$service.thresholds" ){
	while( <$f> ){
		chomp;
		next if m"^\s*(#|$)";
		die unless m"^(\S+)\s+(crit|warn)\s+\[\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\]$";
		my $itempattern = qr"^$1$";
		my $severity = $2;
		my $lower = $3;
		my $upper = $4;
		if    ( $severity eq 'crit' ){
			push @ct, [ $itempattern, $lower, $upper ];
		}elsif( $severity eq 'warn' ){
			push @wt, [ $itempattern, $lower, $upper ];
		}
	}
	close $f;
}

# threshold per metric
my %wm;
my %cm;

# select thretholds
foreach my $k ( keys %m ){
	foreach my $t ( @wt ){
		my ($re, $lower, $upper) = @$t;
		next unless $k =~ $re;
		$wm{$k} = [$lower, $upper];
	}
	foreach my $t ( @ct ){
		my ($re, $lower, $upper) = @$t;
		next unless $k =~ $re;
		$cm{$k} = [$lower, $upper];
	}
}

#
my @p;
foreach my $k ( sort keys %m ){
	my $v = $m{$k};
	my $critical_occurred;
	my ($min, $max);
	
	next unless $v =~ m"^([-+]?\d+(?:\.\d+)?)(.*)$";
	my $value = $1;
	my $unit = $2;
	if   ( $unit eq '%' ) { $min = '0.00'; $max = '100.00'; }
	elsif( $unit eq 'MB' ){ $min = '0.00'; }

	my $key_text = $unit ? "$k\[$unit\]" : "$k";

	my $c;
	if( $cm{$k} ){
		my ($lower, $upper) = @{$cm{$k}};
		$c = "$lower:$upper";
		if    ( $value < $lower ){
			push @c, "$key_text:${value}(lower_crit_thr:$lower)";
			$critical_occurred = 1;
		}elsif( $v > $upper ){
			push @c, "$key_text:${value}(upper_crit_thr:$upper)";
			$critical_occurred = 1;
		}
	}
	my $w;
	if( $wm{$k} ){
		my ($lower, $upper) = @{$wm{$k}};
		$w = "$lower:$upper";
		if    ( $critical_occurred ){
			# ignore
		}elsif( $value < $lower ){
			push @w, "$key_text:${value}(lower_warn_thr:$lower)";
		}elsif( $value > $upper ){
			push @w, "$key_text:${value}(upper_warn_thr:$upper)";
		}
	}
	my $p = "$k=$v;$w;$c;$min;$max";
	push @p, $p;
}

#
my $r = 'OK';
my $rc = 0;
if( @c )   { $r = 'CRIT'; $rc = 2; }
elsif( @w ){ $r = 'WARN';  $rc = 1; }

print join(' / ', $r, @c, @w), "| ", join(' ', @p), "\n";
exit $rc;


